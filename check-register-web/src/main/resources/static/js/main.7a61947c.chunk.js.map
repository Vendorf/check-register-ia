{"version":3,"sources":["main/websocket-client.js","logo.svg","main/CheckRowComponent.jsx","main/SummaryComponent.jsx","main/CheckTableComponent.jsx","main/AccountPaneComponent.jsx","SubscriptionsHistory/data.js","SubscriptionsHistory/SubscriptionsHistory.js","main/temp.jsx","main/ReportComponent.jsx","main/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["SockJS","require","Stomp","module","exports","register","registrations","socket","stompClient","over","connect","frame","forEach","registration","subscribe","route","callback","CheckRowComponent","props","handleEdit","bind","updatedCheck","this","check","transactionName","refs","transactionInput","value","memo","memoInput","payment","paymentInput","deposit","depositInput","each","console","log","focus","fn","defaultValue","e","className","getSafe","placeholder","ref","onChange","React","Component","SummaryComponent","Typography","variant","summary","total","paymentTotal","depositTotal","CheckTableComponent","state","checks","scrollEndRef","createRef","scrollToBottom","refreshChecks","handleNew","finalCheckRef","websocketStompClient","current","giveFocus","scrollIntoView","onRefreshCallback","xhr","XMLHttpRequest","open","onreadystatechange","readyState","JSON","parse","response","result","setState","setRequestHeader","send","onRetreivedCallback","stringify","newCheck","prevState","newChecks","map","id","length","push","classes","main","tableView","checkEntry","i","key","undefined","summaryView","subscriptionsItems","name","ratio","Math","round","subscriptionsHistoryChart","data","datasets","backgroundColor","borderColor","borderWidth","label","fill","yAxisID","borderDash","labels","options","scales","xAxes","gridLines","display","ticks","fontColor","autoSkipPadding","yAxes","maxTicksLimit","position","tooltips","mode","intersect","hover","responsive","maintainAspectRatio","useStyles","makeStyles","theme","cardHeader","borderBottom","borderBottomColor","palette","divider","cardBody","overflow","headerTitleBox","headerActionsBox","textAlign","headerIcon","color","primary","verticalAlign","marginRight","chartBox","borderRight","borderRightColor","chartContainer","width","paddingBottom","minHeight","chart","height","top","left","cardContent","ratingBox","flexDirection","justifyContent","ratingItemValueBox","fontSize","ratingItemValue","ratingItemRatio","marginLeft","Subscriptions","Card","CardHeader","avatar","action","IconButton","aria-label","size","title","CardContent","Grid","container","spacing","item","xs","sm","md","align","LinearProgress","root","appBar","drawer","flexShrink","drawerPaper","toolbar","mixins","content","flexGrow","background","default","padding","ReportComponent","SubscriptionsHistory","styles","drawerClosed","flex","overflowY","split","zIndex","toolBar","toolBarButton","textTransform","borderRadius","maxHeight","maxWidth","minWidth","subToolBar","paddingTop","listButton","accountIcon","Main","useState","setOpen","AppBar","Toolbar","disableGutters","Button","onClick","component","Link","to","Drawer","paper","transitionDuration","List","ListItem","button","ListItemIcon","ListItemText","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a61947c.chunk.js","sourcesContent":["'use strict';\r\n\r\nconst SockJS = require('sockjs-client');\r\nconst Stomp = require('stompjs');\r\n\r\nfunction register(registrations){\r\n    const socket = SockJS('/checkregister');\r\n    const stompClient = Stomp.over(socket);\r\n    stompClient.connect({}, (frame) => {\r\n        registrations.forEach((registration) => {\r\n            stompClient.subscribe(registration.route, registration.callback);\r\n        });\r\n    });\r\n}\r\n\r\nmodule.exports.register = register","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\n\r\nclass CheckRowComponent extends React.Component {\r\n\r\n    constructor(props) { //pass check in props\r\n        super(props);\r\n        //stateless\r\n\r\n        this.handleEdit.bind(this);\r\n    }\r\n\r\n    handleEdit() {\r\n\r\n        //ok so this solution is retarded but it allows you to do it all in one method rather than make a new method for every textbox\r\n        //I'd rather do that because while it is technically better to be able to do fine updates to the check rather than update every\r\n        //single field, I might as well just update every field here and then server-side do finer checks and only update what's necessary\r\n        //in the database. This is technically more error-prone but significantly less verbose on the front-end code front and will hence\r\n        //be a lot easier to manage and understand in future, as well as easier to write at the moment, so I'm just doing that\r\n        //Yes, it means I'm technically creating the check and then throwing it up to the parent which then sets its own check to the same\r\n        //values then goes back down here passing props in order to update the view, which is less memory efficient and computationally\r\n        //more intensive, but idgaf rn this is a tiny application; if it becomes a problem I have this wall of text to tell me how to do\r\n        //it correctly so there you go\r\n\r\n        let updatedCheck = {\r\n                ...this.props.check, //for id; technically not necessary bc stateless but hey\r\n                transactionName: this.refs.transactionInput.value,\r\n                memo: this.refs.memoInput.value,\r\n                payment: {\r\n                    value: this.refs.paymentInput.value\r\n                },\r\n                deposit: {\r\n                    value: this.refs.depositInput.value\r\n                }\r\n        };\r\n\r\n        this.props.handleEdit(updatedCheck);\r\n    }\r\n\r\n    //talk about this maybe for complexity; discuss how react handles rendering, accessing the dom, etc.\r\n    giveFocus(){\r\n        console.log('giving focus')\r\n        console.log('explicit ref', this.refs.transactionInput);\r\n        console.log('explicit', this.refs.transactionInput.value);\r\n        for(var each in this.refs){\r\n            console.log('ref', this.refs[each])\r\n            console.log('each', this.refs[each].value);\r\n            if(this.refs[each].value){\r\n                this.refs[each].focus();\r\n            }\r\n        }\r\n        \r\n        // if(this.refs.transactionInput.value){\r\n        //     this.refs.transactionInput.focus();\r\n        // }\r\n    }\r\n\r\n    getSafe(fn, defaultValue) {\r\n        try {\r\n            return fn();\r\n        } catch (e) {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        //replace this with material ui Grid for better resize controls etc.\r\n        //also use this: https://www.nicknish.co/blog/react-currency-input\r\n            //react-text-mask and text-mask-addons already installed\r\n\r\n        //https://reactdatepicker.com/ so robust!\r\n        return (\r\n            <div className=\"check-row\">\r\n                <input value={this.getSafe(() => this.props.check.transactionName, \"\")} placeholder=\"Name\" ref=\"transactionInput\" onChange={this.handleEdit.bind(this)}></input>\r\n                <input value={this.getSafe(() => this.props.check.memo, \"\")} placeholder=\"memo\" ref=\"memoInput\" onChange={this.handleEdit.bind(this)}></input>\r\n                <input value={this.getSafe(() => this.props.check.payment.value, \"\")} placeholder=\"+0.00\" ref=\"paymentInput\" onChange={this.handleEdit.bind(this)}></input>\r\n                <input value={this.getSafe(() => this.props.check.deposit.value, \"\")} placeholder=\"-0.00\" ref=\"depositInput\" onChange={this.handleEdit.bind(this)}></input>\r\n            </div>\r\n\r\n            //old stateful implementation\r\n            // <div>\r\n            //     <div>\r\n            //         <input value={this.getSafe(() => this.state.check.transactionName, \"\")} placeholder=\"Name\" ref=\"transactionInput\" onChange={this.handleEdit.bind(this)}></input>\r\n            //         <input value={this.getSafe(() => this.state.check.memo, \"\")} placeholder=\"memo\" ref=\"memoInput\" onChange={this.handleEdit.bind(this)}></input>\r\n            //     </div>\r\n            //     <div>\r\n            //         <input value={this.getSafe(() => this.state.check.payment.value, \"\")} placeholder=\"+0.00\" ref=\"paymentInput\" onChange={this.handleEdit.bind(this)}></input>\r\n            //         <input value={this.getSafe(() => this.state.check.deposit.value, \"\")} placeholder=\"-0.00\" ref=\"depositInput\" onChange={this.handleEdit.bind(this)}></input>\r\n            //     </div>\r\n            // </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CheckRowComponent","import React from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nclass SummaryComponent extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        //STATE:\r\n        //summary:\r\n            //checkBookId\r\n            //total\r\n                //symbol\r\n                //value\r\n            //paymentTotal\r\n                //symbol\r\n                //value\r\n            //depositTotal\r\n                //symbol\r\n                //value\r\n    }\r\n\r\n    getSafe(fn, defaultValue) {\r\n        try {\r\n            return fn();\r\n        } catch (e) {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"summary\">\r\n                <Typography variant=\"h3\">{'$' + this.getSafe(()=>this.props.summary.total.value, \"---\")}</Typography>\r\n                <Typography variant=\"h4\">{'Payments: -$' + this.getSafe(()=>this.props.summary.paymentTotal.value, \"---\")}</Typography>\r\n                <Typography variant=\"h4\">{'Deposits: +$' + this.getSafe(()=>this.props.summary.depositTotal.value, \"---\")}</Typography>\r\n                <Typography>MVP: Reports, Calendar+Plug Reports, Input Validation, Database, Filter, Filter Summary, Accounts</Typography>\r\n                <Typography>Monday: Chemistry IA</Typography>\r\n                <Typography>Tuesday: Reports, Calendar+Plug Reports, Input Validation, Database</Typography>\r\n                <Typography>Wednesday: Database, Filter</Typography>\r\n                <Typography>Thursday: Filter Summary, Accounts, Quality of Life</Typography>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SummaryComponent","import React from 'react';\r\n\r\nimport CheckRowComponent from './CheckRowComponent';\r\nimport SummaryComponent from './SummaryComponent';\r\n\r\nimport websocketStompClient from './websocket-client';\r\n\r\nimport './checktablestyle.css';\r\n\r\nclass CheckTableComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            checks: [] //these are all the checks from the given account, which will be passed to render to individual CheckRowComponents\r\n        }\r\n\r\n        this.scrollEndRef = React.createRef();\r\n\r\n        this.handleEdit.bind(this);\r\n        this.scrollToBottom.bind(this);\r\n\r\n        this.refreshChecks.bind(this);\r\n        this.handleNew.bind(this);\r\n\r\n        this.finalCheckRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshChecks(this.scrollToBottom);\r\n        websocketStompClient.register([\r\n            {route: '/event/newCheck', callback: () => {this.refreshChecks(this.scrollToBottom); this.finalCheckRef.current.giveFocus()}},\r\n            {route: '/event/updateCheck', callback: this.refreshChecks},\r\n            {route: '/event/deleteCheck', callback: this.refreshChecks}\r\n        ]);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        //this.scrollToBottom();\r\n    }\r\n\r\n    scrollToBottom(){\r\n        console.log(this.refs);\r\n        this.scrollEndRef.current.scrollIntoView(/*{ behavior: 'smooth' }*/);   \r\n    }\r\n\r\n    // scrollToBottom = () => {\r\n    //     console.log(this.refs);\r\n    //     this.scrollEndRef.current.scrollIntoView(/*{ behavior: 'smooth' }*/);\r\n    // }\r\n\r\n    refreshChecks(onRefreshCallback) {\r\n        //will have service call here to get from server\r\n\r\n        //temp\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('GET', 'http://localhost:8080/checks', true);\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState == 4) {\r\n                console.log('CheckBook mounted');\r\n                console.log(JSON.parse(xhr.response));\r\n                const result = JSON.parse(xhr.response);\r\n                this.setState({\r\n                    // checks: result.checks\r\n                    ...result\r\n                }, onRefreshCallback);\r\n            }\r\n        }.bind(this);\r\n        xhr.setRequestHeader('Content-Type', 'application/json');\r\n        xhr.send();\r\n        //----\r\n\r\n        //[See A in plan.txt]\r\n        // this.getSummary((updatedSummary)=>{this.setState({\r\n        //     summary: updatedSummary\r\n        // })})\r\n\r\n\r\n        // this.setState({\r\n        //     checks: [\r\n        //         {\r\n        //             id: 0,\r\n        //             transactionName: \"AAA\",\r\n        //             memo: \"Memo A\",\r\n        //             payment: {\r\n        //                 value: \"99.99\"\r\n        //             },\r\n        //             deposit: {\r\n        //                 value: \"88.88\"\r\n        //             }\r\n        //         },\r\n        //         {\r\n        //             id: 1,\r\n        //             transactionName: \"BBB\",\r\n        //             memo: \"Memo B\",\r\n        //             payment: {\r\n        //                 value: \"99.99\"\r\n        //             },\r\n        //             deposit: {\r\n        //                 value: \"88.88\"\r\n        //             }\r\n        //         },\r\n        //         {\r\n        //             id: 2,\r\n        //             transactionName: \"CCC\",\r\n        //             memo: \"Memo C\",\r\n        //             payment: {\r\n        //                 value: \"99.99\"\r\n        //             },\r\n        //             deposit: {\r\n        //                 value: \"88.88\"\r\n        //             }\r\n        //         },\r\n        //         {\r\n        //             id: 3\r\n        //         },\r\n        //         {\r\n        //             id: 4\r\n        //         },\r\n        //         {\r\n        //             id: 5\r\n        //         },\r\n        //         {\r\n        //             id: 6\r\n        //         }\r\n        //     ]\r\n        // });\r\n    }\r\n\r\n    getSummary(onRetreivedCallback) {\r\n        //going to later expand this to include getting the summary of only the selected checks\r\n        //passing those to the server for the summary util to handle\r\n\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('GET', 'http://localhost:8080/summary/0', true);\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState == 4) {\r\n                onRetreivedCallback(JSON.parse(xhr.response));\r\n            }\r\n        }\r\n\r\n        xhr.setRequestHeader('Content-Type', 'application/json');\r\n        xhr.send();\r\n\r\n    }\r\n\r\n    handleEdit(updatedCheck) {\r\n        //search checks for the check with the given key\r\n        //update that check\r\n\r\n        //better way to handle this might be to push the info to state, push to server, and then use server response to update\r\n        //state again; that way can maintain better consistency (????)\r\n\r\n        // this.setState(function (prevState) {\r\n        //     let newChecks = prevState.checks.map(check => (check.id == updatedCheck.id) ?\r\n        //         {\r\n        //             ...check,\r\n        //             transactionName: updatedCheck.transactionName,\r\n        //             memo: updatedCheck.memo,\r\n        //             payment: updatedCheck.payment,\r\n        //             deposit: updatedCheck.deposit\r\n        //         } : check);\r\n        //     return {\r\n        //         checks: newChecks\r\n        //     }\r\n        // });\r\n       \r\n        //POST\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('POST', 'http://localhost:8080/updateCheck', true);\r\n        xhr.setRequestHeader('Content-Type', 'application/json');\r\n        xhr.send(JSON.stringify(updatedCheck));\r\n        console.log('Sent Updated Check:', updatedCheck);\r\n\r\n        //now do service call to update the check with the updatedCheck.id in the repo\r\n        \r\n        // this.refreshChecks(()=>{console.log('Post-Refresh State: ', this.state)});\r\n\r\n\r\n        //[See A in plan.txt]\r\n        //pass checks to server, \r\n        // this.getSummary((updatedSummary) => { //GET new summary from server, \r\n        //     this.setState({ //set state with new summary\r\n        //         summary: updatedSummary\r\n        //     }, () => { console.log(this.state) }); //callback for debug; remove later\r\n        // });\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n        //No clue why the one below doesn't work? maybe it's an issue with mapping inside the object, maybe I mistyped something\r\n        // this.setState((prevState)=>{\r\n        //     checks: prevState.checks.map(check => (check.id === updatedCheck.id ? {\r\n        //         ...check, \r\n        //         transactionName: updatedCheck.transactionName,\r\n        //         memo: updatedCheck.memo,\r\n        //         payment: updatedCheck.payment,\r\n        //         deposit: updatedCheck.deposit //maybe should actually go into these and set values; not problematic atm so did this lazy approach\r\n        //     } : check));\r\n        // }, /*for testing purposes*/console.log(this.state.checks));\r\n\r\n\r\n\r\n\r\n        //Old, incomplete. Here in case something explodes above and I have to continue writing like this\r\n        // let target = null;\r\n        // for(checkEntry in checks){\r\n        //     if(checkEntry.id == senderKey){\r\n        //         target = checkEntry;\r\n        //         break;\r\n        //     }\r\n        // }\r\n        // if(target !== null){ //valid check being updated; do update\r\n        //     this.setState((prevState)=>{\r\n        //         checks: prevState.checks.map(check => (check.id == senderKey ? {...check, \r\n        //         }))\r\n        //     })\r\n\r\n        //     target = {\r\n        //         ...target,\r\n        //         transactionName: updatedCheck.transactionName,\r\n        //         memo: updatedCheck.memo,\r\n        //         payment: updatedCheck.payment,\r\n        //         deposit: updatedCheck.deposit //maybe should actually go into these and set values; not problematic atm so did this lazy approach\r\n        //     }\r\n        // }\r\n    }\r\n\r\n     \r\n    handleNew(newCheck){\r\n\r\n        //PROBLEM HERE IS NEW CHECK DOESN'T HAVE AN ID YET!\r\n\r\n        //stuff for handling a new check\r\n        //for now this is same as handleEdit but with an additional push of the updated check\r\n        console.log('New Check', newCheck);\r\n\r\n        this.setState(function (prevState) {\r\n            let newChecks = prevState.checks.map(check => check);\r\n            newCheck.id = newChecks[newChecks.length-1].id + 1; //this is a hack for ids to work\r\n            newChecks.push(newCheck);\r\n            return {\r\n                checks: newChecks\r\n            }\r\n        }, () => {\r\n            this.scrollToBottom();\r\n            this.finalCheckRef.current.giveFocus()});\r\n\r\n        // this.getSummary((updatedSummary) => { //GET new summary from server, \r\n        //     this.setState({ //set state with new summary\r\n        //         summary: updatedSummary\r\n        //     }, () => { console.log(this.state) }); //callback for debug; remove later\r\n        // });\r\n    }\r\n\r\n    //remove later\r\n    testClickHandler() {\r\n        console.log(this.state.checks);\r\n    }\r\n\r\n\r\n    //this should have methods for sorting the checks array by the various filtering options to allow that to happen\r\n\r\n    render() {\r\n        return (\r\n            //map each check to CheckRowComponent and replace all props with simple check={eachCheck}\r\n            //then rewrite CheckRowComponent to function with just check prop\r\n            //then add the service calls within handleUserInput to update a check\r\n            //need to figure out how want to handle deletion of a check; should probably be a separate control or if all fields empty\r\n\r\n            //then, go ahead and figure out how you want to display the check register portion itself\r\n            //goal for today is at least above, then tomorrow can do accounts/summary and that is presentable already\r\n\r\n            //then figure out accounts\r\n            //then figure out summary [or summary first]\r\n            //then figure out calendar, etc.\r\n            //then go on and do reporting, login, etc. that's all later\r\n\r\n            <div className={this.props.classes.main}>\r\n                <div className={this.props.classes.tableView}>\r\n                    <div className=\"check-table\">\r\n                        {this.state.checks.map((checkEntry, i) =>\r\n                            <CheckRowComponent key={checkEntry.id}\r\n                                check={checkEntry}\r\n                                handleEdit={this.handleEdit.bind(this)}\r\n                                ref={i==this.state.checks.length-1 ? this.finalCheckRef : undefined} />\r\n                            )}\r\n                        <CheckRowComponent  handleEdit={this.handleNew.bind(this)}/>\r\n                        <div ref={this.scrollEndRef} />\r\n                        {/* <button onClick={this.testClickHandler.bind(this)}>Test Check Update</button> */}\r\n                    </div>\r\n                </div>\r\n                <div className={this.props.classes.summaryView}>\r\n                    <SummaryComponent \r\n                        summary={this.state?.summary}/> {/*change to getSafe perhaps*/}\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n            // OLD:\r\n            // <div>\r\n            //     <CheckRowComponent transactionName={\"Name A\"} memo={\"Memo A\"} payment={{\r\n            //         symbol: \"$\",\r\n            //         value: \"12.30\"\r\n            //     }} />\r\n            //     <CheckRowComponent transactionName={\"Populated Name\"} />\r\n            //     <CheckRowComponent deposit={{\r\n            //         symbol: \"₹\",\r\n            //         value: \"699.90\"\r\n            //     }} />\r\n            // </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default CheckTableComponent","import React from 'react';\r\n\r\nimport \"./mainstyle.css\";\r\n\r\nclass AccountPaneComponent extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        //don't like how this works right now bc sidebar wraps everything instead of just being the bar, which is bad\r\n        //will correct later though\r\n        return (\r\n            <div class=\"sidebar\">\r\n                <div>{/*intermediate wraper*/}\r\n                    <div>{/*sidebar*/}\r\n                        <button>Account Button</button>\r\n                    </div>\r\n                    <div class=\"main\">{/*main content*/}\r\n                        {this.props.children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default AccountPaneComponent","// import theme from '../../_theme'\n\nexport const subscriptionsItems = [\n  { name: 'GitHub', ratio: 55.3, value: Math.round(55.3 * 144) },\n  { name: 'MaterialUI', ratio: 25.7, value: Math.round(25.7 * 144) },\n  { name: 'Google', ratio: 15.6, value: Math.round(15.6 * 144) },\n  { name: 'ModularCode', ratio: 8.4, value: Math.round(8.4 * 144) },\n  { name: 'GH', ratio: 5.5, value: Math.round(5.5 * 144) },\n]\n\nexport const subscriptionsHistoryChart = {\n  data: {\n    datasets: [\n      {\n        // backgroundColor: theme.palette.secondary.main,\n        // borderColor: theme.palette.secondary.main,\n        backgroundColor: 'rgba(97, 218, 251, 0.3)',\n        borderColor: '#61dafb',\n        borderWidth: 2,\n        label: 'Subscriptions',\n        fill: false,\n        data: [1545, 1350, 1270, 1830, 1955, 1865, 2034, 2544, 1956, 2211, 1540, 1670],\n        yAxisID: 'y1',\n      },\n      {\n        // backgroundColor: 'rgba(136, 151, 170, 0.1)',\n        backgroundColor: 'rgba(97, 218, 251, 0.3)',\n        borderColor: '#8897aa',\n        borderDash: [5, 5],\n        borderWidth: 1,\n        data: [\n          23686,\n          30820,\n          59622,\n          146465,\n          78160,\n          79520,\n          36148,\n          48781,\n          158303,\n          155174,\n          104830,\n          86895,\n        ],\n        label: 'Visits',\n        yAxisID: 'y2',\n      },\n    ],\n    labels: [\n      '2019-03',\n      '2019-04',\n      '2019-05',\n      '2019-06',\n      '2019-07',\n      '2019-08',\n      '2019-09',\n      '2019-10',\n      '2019-11',\n      '2019-12',\n      '2020-01',\n      '2020-02',\n    ],\n  },\n  options: {\n    scales: {\n      xAxes: [\n        {\n          gridLines: { display: false },\n          ticks: { fontColor: '#aaa', autoSkipPadding: 50 },\n        },\n      ],\n      yAxes: [\n        {\n          id: 'y1',\n          gridLines: { display: false },\n          ticks: { fontColor: '#aaa', maxTicksLimit: 5 },\n        },\n        {\n          position: 'right',\n          id: 'y2',\n          gridLines: { display: false },\n          ticks: { fontColor: '#aaa', maxTicksLimit: 5 },\n        },\n      ],\n    },\n    tooltips: {\n      mode: 'index',\n      intersect: false,\n    },\n    hover: {\n      mode: 'index',\n      intersect: false,\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n  },\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  makeStyles,\n  Grid,\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  IconButton,\n  LinearProgress,\n} from '@material-ui/core'\nimport { Timeline as IconTimeline, MoreVert as IconMoreVert } from '@material-ui/icons'\nimport { Line } from 'react-chartjs-2'\n\nimport { subscriptionsItems, subscriptionsHistoryChart } from './data'\n\nconst Subscriptions = props => {\n  const classes = useStyles()\n\n  return (\n    <Card>\n      <CardHeader\n        className={classes.cardHeader}\n        avatar={<IconTimeline className={classes.headerIcon} />}\n        action={\n          <IconButton aria-label=\"settings\" size=\"small\">\n            <IconMoreVert />\n          </IconButton>\n        }\n        title=\"Subscriptions\"\n      />\n      <CardContent className={classes.cardContent}>\n        <Grid container spacing={4}>\n          <Grid item xs={12} sm={8} md={9} className={classes.chartBox}>\n            <div className={classes.chartContainer}>\n              <div className={classes.chart}>\n                <Line\n                  data={subscriptionsHistoryChart.data}\n                  options={subscriptionsHistoryChart.options}\n                />\n              </div>\n            </div>\n          </Grid>\n          <Grid item xs={12} sm={4} md={3} className={classes.ratingBox}>\n            {subscriptionsItems.map(({ name, ratio, value }) => (\n              <div key={name}>\n                <Grid container>\n                  <Grid item xs>\n                    <Typography variant=\"body1\">{name}</Typography>\n                  </Grid>\n                  <Grid item xs className={classes.ratingItemValueBox}>\n                    <Typography\n                      align=\"right\"\n                      variant=\"body2\"\n                      display=\"inline\"\n                      className={classes.ratingItemValue}\n                    >\n                      {value}\n                    </Typography>\n                    <Typography\n                      align=\"left\"\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      className={classes.ratingItemRatio}\n                    >\n                      {ratio}%\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <LinearProgress variant=\"determinate\" value={ratio} color=\"primary\" />\n              </div>\n            ))}\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  )\n}\n\nSubscriptions.propTypes = {}\n\nconst useStyles = makeStyles(theme => ({\n  cardHeader: {\n    borderBottom: '1px solid',\n    borderBottomColor: theme.palette.divider,\n  },\n  cardBody: {\n    overflow: 'hidden',\n  },\n  headerTitleBox: {},\n  headerActionsBox: {\n    textAlign: 'right',\n  },\n  headerIcon: {\n    color: theme.palette.primary.main,\n    verticalAlign: 'sub',\n    marginRight: '.3em',\n  },\n  chartBox: {\n    borderRight: '1px solid',\n    borderRightColor: theme.palette.divider,\n  },\n  chartContainer: {\n    width: '100%',\n    position: 'relative',\n    paddingBottom: '25%',\n    minHeight: 240,\n  },\n  chart: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    top: 0,\n    left: 0,\n  },\n  cardContent: {\n    '&:last-child': {\n      paddingBottom: 'default',\n    },\n  },\n  ratingBox: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n  },\n  ratingItemValueBox: {\n    textAlign: 'right',\n    fontSize: '0.7em',\n  },\n  ratingItemValue: {\n    display: 'inline-block',\n  },\n  ratingItemRatio: {\n    marginLeft: 4,\n    display: 'inline-block',\n    width: '3em',\n    // fontSize: '1em',\n  },\n}))\n\nexport default Subscriptions\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.default,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function PermanentDrawerLeft() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      {/* <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Permanent drawer\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar> */}\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"permanent\"\r\n        // classes={{\r\n        //   paper: classes.drawerPaper,\r\n        // }}\r\n        anchor=\"left\"\r\n      >\r\n        {/* <div className={classes.toolbar} /> */}\r\n        {/* <Divider />\r\n        <List>\r\n          {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List> */}\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        {/* <div className={classes.toolbar} /> */}\r\n        <Typography paragraph>\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\r\n          ut labore et dolore magna aliqua. Rhoncus dolor purus non enim praesent elementum\r\n          facilisis leo vel. Risus at ultrices mi tempus imperdiet. Semper risus in hendrerit\r\n          gravida rutrum quisque non tellus. Convallis convallis tellus id interdum velit laoreet id\r\n          donec ultrices. Odio morbi quis commodo odio aenean sed adipiscing. Amet nisl suscipit\r\n          adipiscing bibendum est ultricies integer quis. Cursus euismod quis viverra nibh cras.\r\n          Metus vulputate eu scelerisque felis imperdiet proin fermentum leo. Mauris commodo quis\r\n          imperdiet massa tincidunt. Cras tincidunt lobortis feugiat vivamus at augue. At augue eget\r\n          arcu dictum varius duis at consectetur lorem. Velit sed ullamcorper morbi tincidunt. Lorem\r\n          donec massa sapien faucibus et molestie ac.\r\n        </Typography>\r\n        <Typography paragraph>\r\n          Consequat mauris nunc congue nisi vitae suscipit. Fringilla est ullamcorper eget nulla\r\n          facilisi etiam dignissim diam. Pulvinar elementum integer enim neque volutpat ac\r\n          tincidunt. Ornare suspendisse sed nisi lacus sed viverra tellus. Purus sit amet volutpat\r\n          consequat mauris. Elementum eu facilisis sed odio morbi. Euismod lacinia at quis risus sed\r\n          vulputate odio. Morbi tincidunt ornare massa eget egestas purus viverra accumsan in. In\r\n          hendrerit gravida rutrum quisque non tellus orci ac. Pellentesque nec nam aliquam sem et\r\n          tortor. Habitant morbi tristique senectus et. Adipiscing elit duis tristique sollicitudin\r\n          nibh sit. Ornare aenean euismod elementum nisi quis eleifend. Commodo viverra maecenas\r\n          accumsan lacus vel facilisis. Nulla posuere sollicitudin aliquam ultrices sagittis orci a.\r\n        </Typography>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SubscriptionsHistory from '../SubscriptionsHistory/SubscriptionsHistory';\r\n\r\nclass ReportComponent extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                <SubscriptionsHistory />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReportComponent","import React from 'react';\r\n\r\nimport AccountPaneComponent from \"./AccountPaneComponent\";\r\nimport CheckTableComponent from \"./CheckTableComponent\";\r\nimport SummaryComponent from \"./SummaryComponent\";\r\n\r\nimport { Drawer, Grid, Paper, Typography, CssBaseline, List, ListItem, ListItemText, makeStyles, Divider, AppBar, Box, Container, Toolbar, Button, ListItemIcon } from \"@material-ui/core\";\r\nimport AccountBalanceWalletOutlinedIcon from '@material-ui/icons/AccountBalanceWalletOutlined';\r\n\r\nimport Subscriptions from '../SubscriptionsHistory/SubscriptionsHistory'\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\n// import SplitPane from \"./SplitPane\"\r\nimport SplitPane from \"react-split-pane\"\r\n\r\n// import Split from \"react-split\";\r\n\r\n// import './mainstyle.css';\r\nimport './split.css';\r\nimport PermanentDrawerLeft from './temp';\r\nimport ReportComponent from './ReportComponent';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst styles = makeStyles({\r\n    root: {\r\n        height: \"100vh\", //kind of feels wrong :/\r\n        width: \"100vw\",\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        // border: \"3px tomato solid\"\r\n    },\r\n\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0\r\n    },\r\n\r\n    drawerClosed: {\r\n        width: 0,\r\n        flexShrink: 0\r\n    },\r\n\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        backgroundColor: '#20232a'\r\n    },\r\n\r\n    // content: {\r\n    //     flexGrow: 1\r\n    // },\r\n\r\n    main: {\r\n        flex: 1,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        // border: \"2px magenta solid\"\r\n    },\r\n\r\n    tableView: {\r\n        flex: 65,\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        overflowY: \"auto\",\r\n        backgroundColor: \"#282c34\",\r\n        // border: \"10px orange solid\"\r\n    },\r\n\r\n    summaryView: {\r\n        flex: 35,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        // border: \"4px red solid\"\r\n    },\r\n\r\n    split: {\r\n        flex: 1\r\n    },\r\n\r\n    appBar: {\r\n        zIndex: 1400\r\n    },\r\n\r\n    toolBar: {\r\n        minHeight: 25,\r\n        backgroundColor: '#20232a'\r\n    },\r\n\r\n    toolBarButton: {\r\n        textTransform: 'none',\r\n        borderRadius: 0,\r\n        maxHeight: 25,\r\n        minHeight: 25,\r\n        maxWidth: 75,\r\n        minWidth: 75,\r\n        fontSize: 15,\r\n        color: 'rgba(255,255,255, 0.7)',\r\n        padding: 0,\r\n        '&:hover': {\r\n            // transition: 0.1,\r\n            backgroundColor: 'rgba(97, 218, 251, 0.8)',\r\n            // color: 'rgba(255,255,255, 0.9)'\r\n        }\r\n    },\r\n\r\n    subToolBar: {\r\n        paddingTop: 25\r\n    },\r\n\r\n    listButton: {\r\n        paddingTop: 20,\r\n        paddingBottom: 20,\r\n        // textAlign: \"center\",\r\n        color: 'rgba(255,255,255, 0.7)',\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(97, 218, 251, 0.8)',\r\n        }\r\n    },\r\n\r\n    accountIcon: {\r\n        fill: 'rgba(255,255,255, 0.7)',\r\n    },\r\n\r\n    content: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        paddingTop: 25, //this is so that is below the toolbar\r\n        // transition: 'all 500ms cubic-bezier(0.23, 1, 0.32, 1)'\r\n    },\r\n\r\n    // contentShifted: {\r\n    //     display: 'flex',\r\n    //     flex: 1,\r\n    //     marginLeft: -drawerWidth,\r\n    //     transition: 'margin-left 500ms cubic-bezier(0.23, 1, 0.32, 1)'\r\n    // },\r\n});\r\n\r\nfunction Main() {\r\n\r\n    const classes = styles();\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const toggleDrawer = () => {\r\n        setOpen(!open);\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            <div className={classes.root}>\r\n                <AppBar position=\"fixed\" className={classes.appBar}>\r\n                    <Toolbar disableGutters className={classes.toolBar}>\r\n                        <Button className={classes.toolBarButton} onClick={toggleDrawer}>Menu</Button>\r\n                        <Button className={classes.toolBarButton} component={Link} to=\"/\">Main</Button>\r\n                        <Button className={classes.toolBarButton} component={Link} to=\"/report\">Report</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    className={open ? classes.drawer : classes.drawerClosed}\r\n                    variant=\"persistent\"\r\n                    classes={{\r\n                        paper: classes.drawerPaper\r\n                    }}\r\n                    open={open}\r\n                    transitionDuration={0}>\r\n                    <List className={classes.subToolBar}>\r\n                        <ListItem button className={classes.listButton}>\r\n                            <ListItemIcon>\r\n                                <AccountBalanceWalletOutlinedIcon className={classes.accountIcon} />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Account A\"></ListItemText>\r\n                        </ListItem>\r\n                        <ListItem button className={classes.listButton}>\r\n                            <ListItemIcon>\r\n                                <AccountBalanceWalletOutlinedIcon className={classes.accountIcon} />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Account B\"></ListItemText>\r\n                        </ListItem>\r\n                        <ListItem button className={classes.listButton}>\r\n                            <ListItemIcon>\r\n                                <AccountBalanceWalletOutlinedIcon className={classes.accountIcon} />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary=\"Account C\"></ListItemText>\r\n                        </ListItem>\r\n                    </List>\r\n                </Drawer>\r\n                <div className={classes.content}>\r\n                    <Switch>\r\n                        <Route exact path=\"/\">\r\n                            <CheckTableComponent\r\n                                classes={classes} />\r\n                                {/* https://stackoverflow.com/questions/50777333/react-hide-a-component-on-a-specific-route\r\n                                Right now this is re-rendering; want to instead configure where it uses withRouter\r\n                                Instead of how they have it, however, the component is always rendered and will set hidden/visible\r\n                                \r\n                                ALTERNATIVELY (and this is probably better on second thought) just have a method here in Main.jsx\r\n                                that is used as an onClick handler for the routing buttons, and that will hide/unhide the CheckTable\r\n                                (or/and any other components) as necessary [with a direct DOM lookup]*/}\r\n                        </Route>\r\n                        <Route path=\"/report\">\r\n                            <ReportComponent />\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </Router>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // <div className={classes.root}>\r\n        //     <Drawer\r\n        //         className={classes.drawer}\r\n        //         variant=\"permanent\"\r\n        //         classes={{\r\n        //             paper: classes.drawerPaper\r\n        //         }}></Drawer>\r\n        //     <CheckTableComponent\r\n        //         classes={classes}/>\r\n        // </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // <div className={classes.root}>\r\n        //     <CssBaseline />\r\n        //     {/* <div className=\"sidebar\">Sidebar</div> */}\r\n        //     <Drawer\r\n        //         className={classes.drawer}\r\n        //         variant='permanent'\r\n        //         classes={{\r\n        //             paper: classes.drawerPaper\r\n        //         }}></Drawer>\r\n        //     <div className={classes.main}>\r\n        //         {/* <SplitPane\r\n        //             className={classes.split}\r\n        //             split=\"horizontal\"\r\n        //             defaultSize=\"100%\"\r\n        //             > */}\r\n        //             <div className={classes.tableView}>\r\n        //                 <CheckTableComponent />\r\n        //             </div>\r\n        //             <div className={classes.summaryView}>\r\n        //                 <SummaryComponent />\r\n        //             </div>\r\n        //         {/* </SplitPane> */}\r\n        //     </div>\r\n        //     {/* <div className={classes.main}> */}\r\n\r\n\r\n        //     {/* <div className={classes.summaryView}>\r\n        //             <SummaryComponent/>\r\n        //         </div> */}\r\n\r\n        //     {/* <SplitPane>\r\n        //             <SplitPane.Top>\r\n        //                 <div className=\"table-view\">\r\n        //                     <CheckTableComponent/>\r\n        //                 </div>\r\n        //             </SplitPane.Top>\r\n        //             <SplitPane.Bottom>\r\n        //                 <div className=\"summary-view\">\r\n        //                     <SummaryComponent/>\r\n        //                 </div>\r\n        //             </SplitPane.Bottom>\r\n        //         </SplitPane> */}\r\n        //     {/* </div> */}\r\n        // </div>\r\n\r\n        //--------------------------\r\n\r\n        // <PermanentDrawerLeft />\r\n        // <div className=\"temp\">\r\n        //     <CssBaseline/>\r\n        //     <Drawer\r\n        //         className=\"temp-drawer\"\r\n        //         variant=\"permanent\"\r\n        //         anchor=\"left\"></Drawer>\r\n        //     <main className=\"temp-content\">\r\n        //         <Typography paragraph>Lorem ipsum dolor sin amet</Typography>\r\n        //     </main>\r\n        // </div>\r\n\r\n        // <div className={classes.root}>\r\n        //     <CssBaseline />\r\n        //     <Drawer\r\n        //         className={classes.drawer}\r\n        //         variant=\"permanent\"\r\n        //         anchor=\"left\"\r\n        //         classes={{\r\n        //             paper: classes.drawerPaper\r\n        //         }}>\r\n        //         <Divider />\r\n        //         <List>\r\n        //             <ListItem button>\r\n        //                 <ListItemText primary=\"Button A\" />\r\n        //             </ListItem>\r\n        //         </List>\r\n        //     </Drawer>\r\n        //     <Typography paragraph>Lorem ipsum dolor sin amet lorem ispum dolor sin amet</Typography>\r\n        // </div>\r\n\r\n        //------------------------\r\n\r\n        // <div className=\"temp\">\r\n        //     <CssBaseline/>\r\n        //     <Drawer\r\n        //     // className=\"temp-drawer\"\r\n        //     className={classes.test}\r\n        //     variant=\"permanent\"\r\n        //     anchor=\"left\">\r\n        //             {/* <Typography>Hello this is content</Typography> */}\r\n        //             <List>\r\n        //                 <ListItem button>\r\n        //                     <ListItemText primary=\"Text\"/>\r\n        //                 </ListItem>\r\n        //             </List>\r\n        //     </Drawer>\r\n        //     <main className=\"temp2\">\r\n        //         {/* <Grid container>\r\n        //             <Grid item xs={12}>\r\n        //                 <Paper>jlkasjdfklajslkdfjalksjdflkajslkdfjlkasjdflkajskldfjlkasjfd</Paper>\r\n        //             </Grid>\r\n        //         </Grid> */}\r\n        //         <Typography paragraph>Lorem ipsum dolor sin amet</Typography>\r\n        //     </main>\r\n        // </div>\r\n\r\n        // <div className=\"container\">\r\n        //     {/* <Drawer \r\n        //         anchor=\"left\" \r\n        //         variant=\"permanent\"\r\n        //         open/> */}\r\n        //     <div className=\"sidebar\">Sidebar</div>\r\n        //     <div className=\"main\">\r\n        //         <SplitPane>\r\n        //             <SplitPane.Top>\r\n        //                 <div className=\"table-view\">\r\n        //                     <CheckTableComponent/>\r\n        //                 </div>\r\n        //             </SplitPane.Top>\r\n        //             <SplitPane.Bottom>\r\n        //                 <div className=\"summary-view\">\r\n        //                     <SummaryComponent/>\r\n        //                 </div>\r\n        //             </SplitPane.Bottom>\r\n        //         </SplitPane>\r\n        //     </div>\r\n        // </div>\r\n\r\n        // <div className=\"container\">\r\n        //     <div className=\"sidebar\">Sidebar</div>\r\n        //     <div className=\"main\">\r\n        //         <div className=\"table-view\">\r\n        //             <CheckTableComponent/>\r\n        //         </div>\r\n        //         <div className=\"summary-view\">\r\n        //             <SummaryComponent/>\r\n        //         </div>\r\n        //     </div>\r\n        // </div>\r\n    );\r\n}\r\n\r\nexport default Main","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport CheckRowComponent from './main/CheckRowComponent';\nimport CheckTableComponent from './main/CheckTableComponent';\nimport AccountPaneComponent from './main/AccountPaneComponent';\nimport SummaryComponent from './main/SummaryComponent';\nimport Main from './main/Main';\n\nfunction App() {\n\n  return (\n    <Main/>\n  );\n\n  // return (\n  //   <AccountPaneComponent>\n  //     <div className=\"App\">\n  //       <CheckTableComponent/>\n  //       <SummaryComponent/>\n  //       <header className=\"App-header\">\n  //         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //         <p>\n  //           Edit <code>src/App.js</code> and save to reload.\n  //         </p>\n  //         <a\n  //           className=\"App-link\"\n  //           href=\"https://reactjs.org\"\n  //           target=\"_blank\"\n  //           rel=\"noopener noreferrer\"\n  //         >\n  //           Learn React\n  //         </a>\n  //       </header>\n  //       <CheckRowComponent />\n  //     </div>\n  //   </AccountPaneComponent>\n  // );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}