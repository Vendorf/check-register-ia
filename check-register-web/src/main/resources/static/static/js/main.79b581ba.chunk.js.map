{"version":3,"sources":["main/websocket-client.js","main/CheckTable/CheckRowComponent.jsx","main/Summary/SummaryComponent.jsx","main/Filter/FilterComponent.jsx","main/CheckTable/CheckTableComponent.jsx","SubscriptionsHistory/data.js","SubscriptionsHistory/SubscriptionsHistory.js","main/Report/ReportComponent.jsx","main/Root.jsx","main/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["SockJS","require","Stomp","module","exports","register","registrations","socket","stompClient","over","connect","frame","forEach","registration","subscribe","route","callback","CheckRowComponent","props","state","transactionNameInput","getSafe","check","transactionName","memoInput","memo","paymentInput","payment","value","depositInput","deposit","dateInput","toDate","date","paymentFocus","depositFocus","handleEdit","bind","transactionInputChanged","memoInputChanged","paymentInputChanged","depositInputChanged","dateInputChanged","handleDelete","paymentInputFocused","paymentInputBlurred","depositInputFocused","depositInputBlurred","isValidDate","transactionInputRef","React","createRef","memoInputRef","paymentInputRef","depositInputRef","datePickerRef","d","Date","isNaN","millis","this","setState","updatedCheck","getTime","current","focus","fn","defaultValue","e","event","target","id","parseFloat","toFixed","paymentInputStr","depositInputStr","paymentInputValue","depositInputValue","getDisplayValue","Math","abs","className","selected","onChange","classes","datePicker","ref","placeholder","type","onFocus","onBlur","immutable","deleteButton","onClick","Component","SummaryComponent","total","summary","paymentTotal","depositTotal","futureTotal","futurePaymentTotal","futureDepositTotal","styleGreen","color","styleRed","styleDefault","getStyle","getSign","Grid","container","spacing","justify","item","xs","Paper","filterPaper","Typography","style","marginRight","marginLeft","summaryDatePicker","baseDate","handleBaseDate","Button","filterButton","handleBaseDateClear","summaryPaper","variant","futureSummaryPaper","FilterComponent","filter","transactionNameFilter","memoFilter","paymentFilter","depositFilter","sort","handleSubmit","handleClear","transactionNameFilterChanged","memoFilterChanged","paymentFilterChanged","depositFilterChanged","transactionNameSortChanged","memoSortChanged","paymentSortChanged","depositSortChanged","handleSort","handleFilters","val","prevState","root","paper","input","Select","disableUnderline","MenuProps","menu","MenuItem","button","CheckTableComponent","checks","scrollEndRef","newCheckRef","scrollToBottom","refreshChecks","handleNew","intervalPost","doSort","refreshSummary","finalCheckRef","updatedContent","hasBeenRefreshed","handlingNewFlag","newCheckTransient","promise","Promise","resolve","thisRef","setInterval","then","resolveCallback","prevProps","account","setDefaultAccount","scrollIntoView","length","xhr","XMLHttpRequest","addEventListener","open","concat","setRequestHeader","send","JSON","stringify","newFilter","newSort","postSortCallback","list","sortConfig","a","b","toUpperCase","dateStr","replace","onRefreshCallback","console","log","onreadystatechange","readyState","parse","response","result","map","contained","arrayCheck","i","push","newCheck","completeCheck","newChecks","newCheckUpd","giveFocus","resetState","newDate","deleteId","splice","main","filterView","filterRoot","filterInput","select","filterSelect","filterMenu","tableView","checkEntry","key","undefined","summaryView","subscriptionsHistoryChart","round","data","datasets","backgroundColor","borderColor","borderWidth","label","fill","yAxisID","borderDash","labels","options","scales","xAxes","gridLines","display","ticks","fontColor","autoSkipPadding","yAxes","maxTicksLimit","position","tooltips","mode","intersect","hover","responsive","maintainAspectRatio","useStyles","makeStyles","theme","cardHeader","borderBottom","borderBottomColor","palette","divider","cardBody","overflow","headerTitleBox","headerActionsBox","textAlign","headerIcon","primary","verticalAlign","chartBox","borderRightColor","chartContainer","width","paddingBottom","minHeight","chart","height","top","left","cardContent","ratingBox","flexDirection","justifyContent","ratingItemValueBox","fontSize","ratingItemValue","ratingItemRatio","Subscriptions","Card","CardHeader","avatar","title","CardContent","Root","accounts","drawerOpen","currAccount","popperOpen","name","deletePopperOpen","refreshAccounts","handleNewAccount","toggleDrawer","setCurrAccount","handleCreateAccount","handleDeleteAccount","deleteAccount","newButtonRef","deleteButtonRef","newAccount","accountName","targetAccount","window","confirm","AppBar","appBar","Toolbar","disableGutters","toolBar","toolBarButton","Drawer","drawer","drawerClosed","drawerPaper","transitionDuration","List","subToolBar","ListItem","listButton","ListItemIcon","accountIcon","ListItemText","Collapse","in","timeout","unmountOnExit","component","disablePadding","nestedListItem","accountInput","handleCreateInputChange","nestedListButton","content","styles","flexShrink","flex","overflowY","split","zIndex","accountPopper","accountPaper","paddingLeft","textTransform","borderRadius","maxHeight","maxWidth","minWidth","padding","paddingTop","flexGrow","marginBottom","marginTop","border","margin","transition","outline","boxShadow","paddingRight","Main","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79b581ba.chunk.js","sourcesContent":["'use strict';\r\n\r\nconst SockJS = require('sockjs-client');\r\nconst Stomp = require('stompjs');\r\n\r\nfunction register(registrations){\r\n    const socket = SockJS('http://localhost:8080/socket');\r\n    const stompClient = Stomp.over(socket);\r\n    stompClient.connect({}, (frame) => {\r\n        registrations.forEach((registration) => {\r\n            stompClient.subscribe(registration.route, registration.callback);\r\n        });\r\n    });\r\n}\r\n\r\nmodule.exports.register = register","import React from 'react';\r\n\r\nimport DatePicker from 'react-datepicker';\r\n\r\nclass CheckRowComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            transactionNameInput: this.getSafe(() => this.props.check.transactionName, \"\"),\r\n            memoInput: this.getSafe(() => this.props.check.memo, \"\"),\r\n            paymentInput: this.getSafe(() => this.props.check.payment.value, \"\"),\r\n            depositInput: this.getSafe(() => this.props.check.deposit.value, \"\"),\r\n            dateInput: (this.toDate(this.getSafe(() => this.props.check.date, null))),\r\n            paymentFocus: false,\r\n            depositFocus: false\r\n        }\r\n\r\n        this.handleEdit.bind(this);\r\n        this.transactionInputChanged.bind(this);\r\n        this.memoInputChanged.bind(this);\r\n        this.paymentInputChanged.bind(this);\r\n        this.depositInputChanged.bind(this);\r\n        this.dateInputChanged.bind(this);\r\n        this.handleDelete.bind(this);\r\n        this.paymentInputFocused.bind(this);\r\n        this.paymentInputBlurred.bind(this);\r\n        this.depositInputFocused.bind(this);\r\n        this.depositInputBlurred.bind(this);\r\n\r\n        this.toDate.bind(this);\r\n        this.isValidDate.bind(this);\r\n\r\n        this.transactionInputRef = React.createRef();\r\n        this.memoInputRef = React.createRef();\r\n        this.paymentInputRef = React.createRef();\r\n        this.depositInputRef = React.createRef();\r\n\r\n        this.datePickerRef = React.createRef();\r\n    }\r\n\r\n    isValidDate(d) {\r\n        return d instanceof Date && !isNaN(d);\r\n      }\r\n\r\n    toDate(millis){\r\n        if(millis != null){\r\n            let date = new Date(millis * 1000);\r\n            return this.isValidDate(date) ? date : null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    resetState(){\r\n        this.setState({\r\n            transactionNameInput: this.getSafe(() => this.props.check.transactionName, \"\"),\r\n            memoInput: this.getSafe(() => this.props.check.memo, \"\"),\r\n            paymentInput: this.getSafe(() => this.props.check.payment.value, \"\"),\r\n            depositInput: this.getSafe(() => this.props.check.deposit.value, \"\"),\r\n            dateInput:  (this.getSafe(() => this.props.check.date, null)),\r\n        });\r\n    }\r\n\r\n    handleEdit(){\r\n        let updatedCheck = {\r\n            ...this.props.check, //for id\r\n            transactionName: this.state.transactionNameInput,\r\n            memo: this.state.memoInput,\r\n            payment: {\r\n                value: this.state.paymentInput\r\n            },\r\n            deposit: {\r\n                value: this.state.depositInput\r\n            },\r\n            date: this.getSafe(()=>this.state.dateInput.getTime()/1000, null)\r\n        };\r\n        \r\n        this.props.handleEdit(updatedCheck);\r\n    }\r\n\r\n    //talk about this maybe for complexity; discuss how react handles rendering, accessing the dom, etc.\r\n    giveFocus(){\r\n        if(this.state.transactionNameInput){\r\n            this.transactionInputRef.current.focus();\r\n        } else if(this.state.memoInput){\r\n            this.memoInputRef.current.focus();\r\n        } else if(this.state.paymentInput){\r\n            this.paymentInputRef.current.focus();\r\n        } else if(this.state.depositInput){\r\n            this.depositInputRef.current.focus();\r\n        } else{\r\n            //default behavior\r\n            this.transactionInputRef.current.focus();\r\n        }\r\n    }\r\n\r\n    getSafe(fn, defaultValue) {\r\n        try {\r\n            return fn();\r\n        } catch (e) {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    transactionInputChanged(event){\r\n        this.setState({\r\n            transactionNameInput: event.target.value\r\n        }, this.handleEdit.bind(this));\r\n    }\r\n\r\n    memoInputChanged(event){\r\n        this.setState({\r\n            memoInput: event.target.value\r\n        }, this.handleEdit.bind(this));\r\n    }\r\n\r\n    paymentInputChanged(event){\r\n        this.setState({\r\n            paymentInput: event.target.value\r\n        }, this.handleEdit.bind(this));\r\n    }\r\n\r\n    depositInputChanged(event){\r\n        this.setState({\r\n            depositInput: event.target.value\r\n        }, this.handleEdit.bind(this));\r\n    }\r\n\r\n    dateInputChanged(date){\r\n        this.setState({\r\n            dateInput: date\r\n        }, this.handleEdit.bind(this));\r\n    }\r\n\r\n    handleDelete(event){\r\n        const id = event.target.value\r\n        this.props.handleDelete(id);\r\n    }\r\n\r\n    paymentInputFocused(){\r\n        this.setState({\r\n            paymentFocus: true\r\n        });\r\n    }\r\n\r\n    paymentInputBlurred(event){\r\n        this.setState({\r\n            paymentFocus: false,\r\n            paymentInput: parseFloat(event.target.value).toFixed(2)\r\n        })\r\n    }\r\n\r\n    depositInputFocused(){\r\n        this.setState({\r\n            depositFocus: true\r\n        });\r\n    }\r\n\r\n    depositInputBlurred(event){\r\n        this.setState({\r\n            depositFocus: false,\r\n            depositInput: parseFloat(event.target.value).toFixed(2)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        \r\n        const defaultStr = \"\";\r\n        let paymentInputStr = this.getSafe(() => this.state.paymentInput, \"\");\r\n        let depositInputStr = this.getSafe(() => this.state.depositInput, \"\");\r\n\r\n        let paymentInputValue = parseFloat(paymentInputStr);\r\n        let depositInputValue = parseFloat(depositInputStr);\r\n\r\n        const getDisplayValue = (value) => {\r\n            return isNaN(value) ? defaultStr : Math.abs(value).toFixed(2);\r\n        }\r\n\r\n        return (\r\n            <div className=\"check-row\">\r\n                <DatePicker selected={this.state.dateInput} onChange={this.dateInputChanged.bind(this)} className={this.props.classes.datePicker} ref={this.datePickerRef}/>\r\n                <input value={this.getSafe(() => this.state.transactionNameInput, \"\")} placeholder=\"Name\" ref={this.transactionInputRef} onChange={this.transactionInputChanged.bind(this)}></input>\r\n                <input value={this.getSafe(() => this.state.memoInput, \"\")} placeholder=\"memo\" ref={this.memoInputRef} onChange={this.memoInputChanged.bind(this)}></input>\r\n                <input type=\"number\" value={this.state.paymentFocus ? paymentInputStr : getDisplayValue(paymentInputValue)} placeholder=\"+0.00\" ref={this.paymentInputRef} onChange={this.paymentInputChanged.bind(this)} onFocus={this.paymentInputFocused.bind(this)} onBlur={this.paymentInputBlurred.bind(this)}></input>\r\n                <input type=\"number\" value={this.state.depositFocus ? depositInputStr : getDisplayValue(depositInputValue)} placeholder=\"-0.00\" ref={this.depositInputRef} onChange={this.depositInputChanged.bind(this)} onFocus={this.depositInputFocused.bind(this)} onBlur={this.depositInputBlurred.bind(this)}></input>\r\n                {this.props.immutable ? null : <button className={this.props.classes.deleteButton} value={this.getSafe(()=> this.props.check.id)} onClick={this.handleDelete.bind(this)}></button>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CheckRowComponent","import React from 'react';\r\nimport { Typography, Button, Grid, Paper } from '@material-ui/core';\r\nimport DatePicker from 'react-datepicker';\r\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\r\n\r\nimport './summary.css';\r\n\r\nclass SummaryComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    getSafe(fn, defaultValue) {\r\n        try {\r\n            return fn();\r\n        } catch (e) {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    isValidDate(d) {\r\n        return d instanceof Date && !isNaN(d);\r\n    }\r\n\r\n    toDate(millis) {\r\n        if (millis != null) {\r\n            let date = new Date(millis * 1000);\r\n            return this.isValidDate(date) ? date : null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let defaultStr = \"---\";\r\n\r\n        let total = parseFloat(this.getSafe(() => this.props.summary.total.value, \"---\"));\r\n        let paymentTotal = parseFloat(this.getSafe(() => this.props.summary.paymentTotal.value, \"---\"));\r\n        let depositTotal = parseFloat(this.getSafe(() => this.props.summary.depositTotal.value, \"---\"));\r\n\r\n        let futureTotal = parseFloat(this.getSafe(() => this.props.summary.futureTotal.value, \"---\"));\r\n        let futurePaymentTotal = parseFloat(this.getSafe(() => this.props.summary.futurePaymentTotal.value, \"---\"));\r\n        let futureDepositTotal = parseFloat(this.getSafe(() => this.props.summary.futureDepositTotal.value, \"---\"));\r\n\r\n        const styleGreen = {\r\n            color: 'rgba(0,255,0,0.6)'\r\n        }\r\n        const styleRed = {\r\n            color: 'rgba(255,0,0,0.6)'\r\n        }\r\n        const styleDefault = {\r\n        }\r\n\r\n        const getStyle = (value) => {\r\n            return isNaN(value) || value == 0 ? styleDefault\r\n                : value > 0 ? styleGreen\r\n                    : styleRed;\r\n        }\r\n\r\n        const getSign = (value) => {\r\n            return isNaN(value) || value==0 ? \"\" : value > 0 ? \"▲\" : \"▼-\";\r\n        }\r\n\r\n        const getDisplayValue = (value) => {\r\n            return isNaN(value) ? defaultStr : Math.abs(value).toFixed(2);\r\n        }\r\n\r\n        return (\r\n            <div className=\"summary\">\r\n                <Grid container\r\n                    spacing={0}\r\n                    justify=\"flex-end\">\r\n                    <Grid item xs={3}>\r\n                        <Paper className={this.props.classes.filterPaper}>\r\n                            <Typography style={{ color: 'rgba(255,255,255, 0.7)', marginRight: 5, marginLeft: 10 }}>Filter Future Date:</Typography>\r\n\r\n                            <DatePicker className={this.props.classes.summaryDatePicker} selected={this.toDate(this.getSafe(() => this.props.summary.baseDate, null))} onChange={this.props.handleBaseDate} />\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Paper className={this.props.classes.filterPaper}>\r\n                            <Button className={this.props.classes.filterButton} onClick={this.props.handleBaseDateClear}>Clear</Button>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Paper className={this.props.classes.summaryPaper}>\r\n                    <Typography variant=\"h3\" style={getStyle(total)}>{getSign(total) + '$' + getDisplayValue(total)}</Typography>\r\n                    <Typography variant=\"h4\" style={styleRed}>{'Payments: -$' + getDisplayValue(paymentTotal)}</Typography>\r\n                    <Typography variant=\"h4\" style={styleGreen}>{'Deposits: +$' + getDisplayValue(depositTotal)}</Typography>\r\n                </Paper>\r\n\r\n                <Paper className={this.props.classes.futureSummaryPaper}>\r\n                    <Typography style={getStyle(futureTotal)}>{\"Future Total Change: \" + getSign(futureTotal) + \"$\" + getDisplayValue(futureTotal)}</Typography>\r\n                    <Typography style={isNaN(futurePaymentTotal) ? styleDefault : styleRed}>{\"Future Payment Change: -$\" + getDisplayValue(futurePaymentTotal)}</Typography>\r\n                    <Typography style={isNaN(futureDepositTotal) ? styleDefault : styleGreen}>{\"Future Deposit Change: +$\" + getDisplayValue(futureDepositTotal)}</Typography>\r\n                </Paper>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SummaryComponent","import React from 'react';\r\n\r\nimport { Grid, Paper, Button, Select, MenuItem } from \"@material-ui/core\";\r\n\r\nclass FilterComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            filter: {\r\n                transactionNameFilter: \"\",\r\n                memoFilter: \"\",\r\n                paymentFilter: \"\",\r\n                depositFilter: \"\"\r\n            },\r\n            sort: [0,0,0,0] //1 is ascending, -1 is descending, 0 is none\r\n        }\r\n\r\n        this.handleSubmit.bind(this);\r\n        this.handleClear.bind(this);\r\n\r\n        this.transactionNameFilterChanged.bind(this);\r\n        this.memoFilterChanged.bind(this);\r\n        this.paymentFilterChanged.bind(this);\r\n        this.depositFilterChanged.bind(this);\r\n\r\n        this.transactionNameSortChanged.bind(this);\r\n        this.memoSortChanged.bind(this);\r\n        this.paymentSortChanged.bind(this);\r\n        this.depositSortChanged.bind(this);\r\n    }\r\n\r\n    handleSubmit(){\r\n        this.props.handleSort(this.state.sort, \r\n            ()=>{this.props.handleFilters(this.state.filter)});\r\n    }\r\n\r\n    handleClear(){\r\n        this.setState({\r\n            filter: {\r\n                transactionNameFilter: \"\",\r\n                memoFilter: \"\",\r\n                paymentFilter: \"\",\r\n                depositFilter: \"\"\r\n            },\r\n            sort: [0,0,0,0]\r\n        }, this.handleSubmit.bind(this));\r\n    }\r\n\r\n    //complexity: event doesn't persist so need to account for that\r\n    transactionNameFilterChanged(event){\r\n        let val = event.target.value;\r\n        this.setState((prevState) => ({\r\n            filter: {\r\n                ...prevState.filter,\r\n                transactionNameFilter: val\r\n            }\r\n        }));\r\n    }\r\n\r\n    memoFilterChanged(event){\r\n        let val = event.target.value;\r\n        this.setState((prevState) => ({\r\n            filter: {\r\n                ...prevState.filter,\r\n                memoFilter: val\r\n            }\r\n        }));\r\n    }\r\n\r\n    paymentFilterChanged(event){\r\n        let val = event.target.value;\r\n        this.setState((prevState) => ({\r\n            filter: {\r\n                ...prevState.filter,\r\n                paymentFilter: val\r\n            }\r\n        }));\r\n    }\r\n\r\n    depositFilterChanged(event){\r\n        let val = event.target.value;\r\n        this.setState((prevState) => ({\r\n            filter: {\r\n                ...prevState.filter,\r\n                depositFilter: val\r\n            }\r\n        }));\r\n    }\r\n\r\n    //--sort handlers-------\r\n    transactionNameSortChanged(event){\r\n        this.setState({\r\n            sort: [event.target.value, 0, 0]\r\n        });\r\n    }\r\n\r\n    memoSortChanged(event){\r\n        this.setState({\r\n            sort: [0, event.target.value, 0, 0]\r\n        });\r\n    }\r\n\r\n    paymentSortChanged(event){\r\n        this.setState({\r\n            sort: [0, 0, event.target.value, 0]\r\n        });\r\n    }\r\n\r\n    depositSortChanged(event){\r\n        this.setState({\r\n            sort: [0, 0, 0, event.target.value]\r\n        });\r\n    }\r\n\r\n    //at top: show/hide button that sets open hook, then conditionaly render based on the state of open hook\r\n    render() {\r\n        return (\r\n            <div className={this.props.classes.root}>\r\n                <Grid container\r\n                    spacing={0}\r\n                    justify=\"flex-end\">\r\n                    <Grid item xs={3}>\r\n                        <Paper className={this.props.classes.paper}>\r\n                            <input value={this.state.filter.transactionNameFilter} className={this.props.classes.input} placeholder=\"Search Transaction\" onChange={this.transactionNameFilterChanged.bind(this)}></input>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Paper className={this.props.classes.paper}>\r\n                            <input value={this.state.filter.memoFilter} className={this.props.classes.input} placeholder=\"Search Memo\" onChange={this.memoFilterChanged.bind(this)}></input>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Paper className={this.props.classes.paper}>\r\n                            <input value={this.state.filter.paymentFilter} type=\"number\" className={this.props.classes.input} placeholder=\"Search Payment\" onChange={this.paymentFilterChanged.bind(this)}></input>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Paper className={this.props.classes.paper}>\r\n                            <input value={this.state.filter.depositFilter} type=\"number\" className={this.props.classes.input} placeholder=\"Search Deposit\" onChange={this.depositFilterChanged.bind(this)}></input>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item xs={3}>\r\n                        <Paper className={this.props.classes.paper}>\r\n                            {/* can make these selects their own class for ease of use later but whatever */}\r\n                            <Select\r\n                                disableUnderline={true}\r\n                                className={this.props.classes.input}\r\n                                MenuProps={{ classes: { paper: this.props.classes.menu } }}\r\n                                onChange={this.transactionNameSortChanged.bind(this)}\r\n                                value={this.state.sort[0]}>\r\n                                <MenuItem value=\"\" className={this.props.classes.button}>\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                <MenuItem value={1} className={this.props.classes.button}>Ascending</MenuItem>\r\n                                <MenuItem value={-1} className={this.props.classes.button}>Descending</MenuItem>\r\n                            </Select>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Paper className={this.props.classes.paper}>\r\n                            <Select\r\n                                disableUnderline={true}\r\n                                className={this.props.classes.input}\r\n                                MenuProps={{ classes: { paper: this.props.classes.menu } }}\r\n                                onChange={this.memoSortChanged.bind(this)}\r\n                                value={this.state.sort[1]}>\r\n                                <MenuItem value=\"\" className={this.props.classes.button}>\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                <MenuItem value={1} className={this.props.classes.button}>Ascending</MenuItem>\r\n                                <MenuItem value={-1} className={this.props.classes.button}>Descending</MenuItem>\r\n                            </Select>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Paper className={this.props.classes.paper}>\r\n                            <Select\r\n                                disableUnderline={true}\r\n                                className={this.props.classes.input}\r\n                                MenuProps={{ classes: { paper: this.props.classes.menu } }}\r\n                                onChange={this.paymentSortChanged.bind(this)}\r\n                                value={this.state.sort[2]}>\r\n                                <MenuItem value=\"\" className={this.props.classes.button}>\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                <MenuItem value={1} className={this.props.classes.button}>Ascending</MenuItem>\r\n                                <MenuItem value={-1} className={this.props.classes.button}>Descending</MenuItem>\r\n                            </Select>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <Paper className={this.props.classes.paper}>\r\n                            <Select\r\n                                disableUnderline={true}\r\n                                className={this.props.classes.input}\r\n                                MenuProps={{ classes: { paper: this.props.classes.menu } }}\r\n                                onChange={this.depositSortChanged.bind(this)}\r\n                                value={this.state.sort[3]}>\r\n                                <MenuItem value=\"\" className={this.props.classes.button}>\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                <MenuItem value={1} className={this.props.classes.button}>Ascending</MenuItem>\r\n                                <MenuItem value={-1} className={this.props.classes.button}>Descending</MenuItem>\r\n                            </Select>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item xs={1}>\r\n                        <Paper className={this.props.classes.paper}>\r\n                            <Button className={this.props.classes.button} onClick={this.handleClear.bind(this)}>Clear</Button>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Paper className={this.props.classes.paper}>\r\n                            <Button className={this.props.classes.button} onClick={this.handleSubmit.bind(this)}>Submit</Button>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterComponent","import React from 'react';\r\n\r\nimport CheckRowComponent from './CheckRowComponent';\r\nimport SummaryComponent from '../Summary/SummaryComponent';\r\n\r\nimport websocketStompClient from '../websocket-client';\r\n\r\nimport './checktablestyle.css';\r\nimport '../mainstyle.css';\r\nimport FilterComponent from '../Filter/FilterComponent';\r\n\r\nclass CheckTableComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            checks: [],\r\n            filter: {\r\n                transactionNameFilter: \"\",\r\n                memoFilter: \"\",\r\n                paymentFilter: \"\",\r\n                depositFilter: \"\",\r\n                baseDate: null\r\n            },\r\n            sort: [0,0,0,0] //these are all the checks from the given account, which will be passed to render to individual CheckRowComponents\r\n        }\r\n\r\n        this.scrollEndRef = React.createRef();\r\n        this.newCheckRef = React.createRef();\r\n\r\n        this.handleEdit.bind(this);\r\n        this.scrollToBottom.bind(this);\r\n\r\n        this.refreshChecks.bind(this);\r\n        this.handleNew.bind(this);\r\n        \r\n        this.intervalPost.bind(this);\r\n        this.handleFilters.bind(this);\r\n        this.handleSort.bind(this);\r\n        this.doSort.bind(this);\r\n        this.handleBaseDate.bind(this);\r\n        this.handleBaseDateClear.bind(this);\r\n        this.handleDelete.bind(this);\r\n\r\n        this.refreshSummary.bind(this);\r\n\r\n        this.finalCheckRef = React.createRef();\r\n\r\n        this.updatedContent = [];\r\n        \r\n\r\n        this.hasBeenRefreshed = false;\r\n\r\n\r\n        this.handlingNewFlag = false;\r\n        this.newCheckTransient = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshChecks(this.scrollToBottom);\r\n        this.hasBeenRefreshed = true;\r\n        // websocketStompClient.register([\r\n        //     //the only reason for these to exist is if somebody else does an edit now, seeing as it\r\n        //     //simply refreshes checks with the new editing system\r\n        //     //for this, will want to rewrite editing system to have the id of the currently edited item,\r\n        //     //and do a refresh on everything except that item when a websocket call comes in\r\n        //     //still want to keep the refresh in intervalPost for when all editing done, to refresh that last\r\n        //     //item as well\r\n        //     //this is now [G]\r\n\r\n        //     //{route: '/event/newCheck', callback: function(){this.refreshChecks(this.scrollToBottom.bind(this)).bind(this); this.finalCheckRef.current.giveFocus().bind(this)}.bind(this)}, //i think this is totally wrong? just refresh the check surely... at least if the id is correct this shouldn't be necessary; need to actually do usability test to see if it crops up\r\n        //     //{route: '/event/updateCheck', callback: (message) => {this.refreshChecks()}}, //hallelujah it works omg\r\n        //     // {route: '/event/deleteCheck', callback: (message) => {/*this.refreshChecks.bind(this)*/console.log('websocket delete event')}}\r\n        // ]);\r\n\r\n        let promise = Promise.resolve(true);\r\n        let thisRef = this;\r\n        setInterval(function(){\r\n            promise = promise.then(function(){\r\n                return new Promise(function(resolveCallback){\r\n                    thisRef.intervalPost(resolveCallback);\r\n                });\r\n            });\r\n        }, 2000);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.account == null) {\r\n            this.props.setDefaultAccount();\r\n        }\r\n        else if(prevProps?.account?.id != this.props.account.id){\r\n            this.refreshChecks();\r\n        }\r\n    }\r\n\r\n    scrollToBottom(){\r\n        this.scrollEndRef.current.scrollIntoView(/*{ behavior: 'smooth' }*/);   \r\n    }\r\n\r\n    //complexity: optomization, promises\r\n    //See [H] for improvements to this\r\n    intervalPost(callback){\r\n        // console.log('interval')\r\n        if(this.updatedContent.length > 0){ \r\n            //THIS IS THE PROBLEM!!!! if the id's are fake, when sent to server, will be changed, so repopulating the updatedContent then actually makes new!!! entries\r\n            //Only real way to solve I think is going to be to, in handleNew, actually get the new check and then edit that\r\n            this.hasBeenRefreshed = false;\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.addEventListener(\"loadend\", callback);\r\n            xhr.open('POST', '/updateChecks/'.concat(this.props.account.id), true);\r\n            xhr.setRequestHeader('Content-Type', 'application/json');\r\n            xhr.send(JSON.stringify(this.updatedContent));\r\n            this.updatedContent = [];\r\n\r\n            this.refreshSummary();\r\n        } else if(!this.hasBeenRefreshed){ //if updatedContent isn't empty, it won't refresh; eliminates the need for the timer\r\n            this.refreshChecks();\r\n            this.hasBeenRefreshed = true;\r\n            callback(true);\r\n        } else{\r\n            callback(true);\r\n        }\r\n    }\r\n\r\n    handleFilters(newFilter){\r\n        this.setState({\r\n            filter: newFilter\r\n        }, this.refreshChecks.bind(this));\r\n    }\r\n\r\n    handleSort(newSort, postSortCallback){\r\n        this.setState({\r\n            sort: newSort\r\n        }, postSortCallback);\r\n    }\r\n\r\n    //complexity: sorting\r\n    doSort(list){\r\n        const sortConfig = this.state.sort;\r\n        if(sortConfig[0] != 0){\r\n            list.sort((a, b) => (a.transactionName.toUpperCase() > b.transactionName.toUpperCase()) ? sortConfig[0] : -sortConfig[0])\r\n        } else if(sortConfig[1] != 0){\r\n            list.sort((a, b) => (a.memo.toUpperCase() > b.memo.toUpperCase()) ? sortConfig[1] : -sortConfig[1])\r\n        } else if(sortConfig[2] != 0){\r\n            list.sort((a, b) => (parseFloat(a.payment.value) > parseFloat(b.payment.value)) ? sortConfig[2] : -sortConfig[2])\r\n        } else if(sortConfig[3] != 0){\r\n            list.sort((a, b) => (parseFloat(a.deposit.value) > parseFloat(b.deposit.value)) ? sortConfig[3] : -sortConfig[3])\r\n        } \r\n\r\n        else {\r\n            list.sort((a,b) => (\r\n                a.date == b.date ? 0\r\n                : a.date == null ? 1 \r\n                : b.date == null ? -1\r\n                : a.date < b.date ? -1 : 1))\r\n        }\r\n    }\r\n\r\n    isValidDate(d) {\r\n        return d instanceof Date && !isNaN(d);\r\n      }\r\n\r\n    getDate(dateStr){\r\n        let date = null;\r\n        if(dateStr != null){\r\n            date = new Date(dateStr.replace(/-/g, '\\/'));\r\n        }\r\n        if(this.isValidDate(date)){\r\n            return date;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    refreshChecks(onRefreshCallback) {\r\n        console.log('refresh')\r\n        console.log(this.props.account)\r\n        if(this.props.account == null){\r\n            console.log('block')\r\n            return;\r\n        }\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('POST', '/filteredChecks/'.concat(this.props.account.id), true);\r\n            xhr.onreadystatechange = function () {\r\n                if (xhr.readyState == 4) {\r\n                    console.log('CheckBook mounted');\r\n                    console.log(JSON.parse(xhr.response));\r\n                    let result = JSON.parse(xhr.response);\r\n                    this.doSort(result.checks);\r\n                    this.setState({\r\n                        //checks: result.checks,\r\n                        ...result\r\n                    }, onRefreshCallback);\r\n                }\r\n            }.bind(this);\r\n            xhr.setRequestHeader('Content-Type', 'application/json');\r\n            xhr.send(JSON.stringify(this.state.filter));\r\n    }\r\n\r\n\r\n    refreshSummary(){\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('POST', '/summary/'.concat(this.props.account.id), true);\r\n        xhr.onreadystatechange = function(){\r\n            if(xhr.readyState == 4){\r\n                let result = JSON.parse(xhr.response);\r\n                this.setState({\r\n                    summary: result,\r\n                });\r\n            }\r\n        }.bind(this);\r\n        xhr.setRequestHeader('Content-Type', 'application/json');\r\n        xhr.send(JSON.stringify(this.state.filter));\r\n    }\r\n\r\n    // getSummary(onRetreivedCallback) {\r\n    //     let xhr = new XMLHttpRequest();\r\n    //     xhr.open('GET', 'http://localhost:5000/summary/0', true);\r\n    //     xhr.onreadystatechange = function () {\r\n    //         if (xhr.readyState == 4) {\r\n    //             onRetreivedCallback(JSON.parse(xhr.response));\r\n    //         }\r\n    //     }\r\n\r\n    //     xhr.setRequestHeader('Content-Type', 'application/json');\r\n    //     xhr.send();\r\n\r\n    // }\r\n\r\n    //complexity: keeping track of changes\r\n    handleEdit(updatedCheck) {\r\n        // console.log('edit')\r\n        // console.log('%c%s',\r\n        // 'color: blue; background: orange; font-size: 24px;','Hit edit!')\r\n        // console.log('%c%s',\r\n        // 'color: blue; background: orange; font-size: 24px;',this.updatedContent)\r\n        \r\n        //See [E] in plan.txt\r\n        this.setState(function (prevState) {\r\n            let newChecks = prevState.checks.map(check => (check.id == updatedCheck.id) ?\r\n                {\r\n                    ...check,\r\n                    transactionName: updatedCheck.transactionName,\r\n                    memo: updatedCheck.memo,\r\n                    payment: updatedCheck.payment,\r\n                    deposit: updatedCheck.deposit,\r\n                    date: updatedCheck.date\r\n                } : check);\r\n            return {\r\n                checks: newChecks\r\n            }\r\n        });\r\n\r\n        let contained = false;\r\n        this.updatedContent.forEach((arrayCheck, i) => {\r\n            // console.log(arrayCheck, updatedCheck)\r\n            if(arrayCheck.id == updatedCheck.id){\r\n                // console.log('set')\r\n                this.updatedContent[i] = updatedCheck;\r\n                contained = true;\r\n            }\r\n        });\r\n        if(!contained){\r\n            // console.log('pushed')\r\n            this.updatedContent.push(updatedCheck);\r\n        }\r\n    }\r\n\r\n    //complexity: describe the bug you squashed! need to suppress to get response from server, temp ids don't work\r\n    handleNew(newCheck){\r\n        if(this.handlingNewFlag){\r\n            this.newCheckTransient = newCheck; //keep updating, but don't do more requests\r\n            return; //blocking from doing request forever\r\n        }\r\n        this.handlingNewFlag = true;\r\n        this.newCheckTransient = newCheck; //init time\r\n\r\n        let completeCheck = null;\r\n\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('POST', '/newCheck/'.concat(this.props.account.id), true);\r\n        xhr.onreadystatechange = function(){\r\n            if(xhr.readyState == 4){\r\n                //got the new check, result will have the id we need\r\n                // console.log(xhr.response)\r\n                const result = JSON.parse(xhr.response);\r\n                this.setState(function(prevState){\r\n                    let newChecks = prevState.checks.map(check => check);\r\n                    let newCheckUpd = this.newCheckTransient; //use the latest edits\r\n                    newCheckUpd.id = result.id; //use the db id\r\n                    completeCheck = newCheckUpd;\r\n                    newChecks.push(newCheckUpd);\r\n                    return ({\r\n                        checks: newChecks\r\n                    });\r\n                }, () => {\r\n                    this.finalCheckRef.current.giveFocus();\r\n                    this.newCheckRef.current.resetState();\r\n                    this.handlingNewFlag = false;\r\n                    this.newCheckTransient = null;\r\n                this.updatedContent.push(completeCheck); //because it will be the only new one for sure, and now have set id so can safely push\r\n                                                        //have to use completeCheck to get the newCheckTransient updates AND the newCheckUpd id\r\n                this.scrollToBottom();\r\n            });\r\n            }\r\n        }.bind(this);\r\n        xhr.setRequestHeader('Content-Type', 'application/json');\r\n        xhr.send(JSON.stringify(newCheck));\r\n\r\n\r\n\r\n\r\n        // console.log(\"new\")\r\n        // //PROBLEM HERE IS NEW CHECK DOESN'T HAVE AN ID YET!\r\n\r\n        // //stuff for handling a new check\r\n        // //for now this is same as handleEdit but with an additional push of the updated check\r\n        // this.newCheckRef.current.resetState();\r\n        \r\n        // this.setState(function (prevState) {\r\n        //     //can implement pseudo id or can try to patch over by finding largest id and doing +1 there\r\n\r\n        //     //the reason for duplicates is likely that this id doesn't agree with repo one, so then\r\n        //     //when it sets the state it actually adds it as another check; every simple time\r\n        //     //the post interval happens, then, the check is sent as a new one because \r\n        //     //repo.save does both updating and merging, so unbeknownst what seems like it should\r\n        //     //be an update is actually a save into the db\r\n        //     //I think that's at least part of what it must be; might be deeper though\r\n        //     let newChecks = prevState.checks.map(check => check);\r\n        //     //See [F] on how to change to internal id\r\n        //     newCheck.id = newChecks[newChecks.length-1].id + 1; //this is a hack for ids to work\r\n        //     newChecks.push(newCheck);\r\n        //     return {\r\n        //         checks: newChecks\r\n        //     }\r\n        // }, () => {\r\n        //     this.scrollToBottom();\r\n        //     this.finalCheckRef.current.giveFocus()\r\n            \r\n        //     let contained = false;\r\n        //     this.updatedContent.forEach((arrayCheck, i) => {\r\n        //         if(arrayCheck.id == newCheck.id){\r\n        //             contained = true;\r\n        //         }\r\n        //     });\r\n        //     if(!contained){\r\n        //         this.updatedContent.push(newCheck); \r\n        //         //so if a single character is entered, this check will still be pushed\r\n        //         //BUT, if it is already in there (IE, with >1 character) from future handleEdit events,\r\n        //         //then it won't be pushed; this prevents accidently reverting to the earlier state when\r\n        //         //handleNew was called and then handleEdit was called in future\r\n        //     }\r\n        // });\r\n    }\r\n\r\n    getSafe(fn, defaultValue) {\r\n        try {\r\n            return fn();\r\n        } catch (e) {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    handleBaseDate(newDate){\r\n        this.setState(function(prevState){\r\n            let newState = {\r\n                summary: {\r\n                    ...prevState.summary,\r\n                    baseDate: this.getSafe(()=>newDate.getTime()/1000, null)\r\n                },\r\n                filter: {\r\n                    ...prevState.filter,\r\n                    baseDate: this.getSafe(()=>newDate.getTime()/1000, null) \r\n                }\r\n            };\r\n            return newState;\r\n    }, this.refreshChecks.bind(this));\r\n        \r\n    }\r\n\r\n    handleBaseDateClear(){\r\n        this.setState(function(prevState){\r\n            let newState = {\r\n                summary: {\r\n                    ...prevState.summary,\r\n                    baseDate: null\r\n                },\r\n                filter: {\r\n                    ...prevState.filter,\r\n                    baseDate: null\r\n                }\r\n            };\r\n            return newState;\r\n    }, this.refreshChecks.bind(this));\r\n    }\r\n\r\n    handleDelete(deleteId){\r\n        if(deleteId){\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('DELETE', '/deleteCheck/'.concat(deleteId), true);\r\n            xhr.onreadystatechange = function(){\r\n                if(xhr.readyState == 4){\r\n                    this.refreshChecks.bind(this);\r\n                }\r\n            }.bind(this)\r\n            xhr.setRequestHeader('DELETE', 'application/json');\r\n            xhr.send(deleteId);\r\n\r\n            this.setState(function (prevState) {\r\n                let newChecks = prevState.checks.map((check) => check);\r\n                prevState.checks.forEach((check, i) =>{\r\n                    if(check.id == deleteId){\r\n                        newChecks.splice(i, 1);\r\n                    }\r\n                });\r\n                return {\r\n                    checks: newChecks\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    //this should have methods for sorting the checks array by the various filtering options to allow that to happen\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.classes.main}>\r\n                <div className={this.props.classes.filterView}>\r\n                    <FilterComponent classes={{\r\n                        root: this.props.classes.filterRoot,\r\n                        paper: this.props.classes.filterPaper,\r\n                        input: this.props.classes.filterInput,\r\n                        button: this.props.classes.filterButton,\r\n                        select: this.props.classes.filterSelect,\r\n                        menu: this.props.classes.filterMenu,\r\n                    }}\r\n                    handleFilters={this.handleFilters.bind(this)}\r\n                    handleSort={this.handleSort.bind(this)}/>\r\n                </div>\r\n                <div className={this.props.classes.tableView}>\r\n                    <div className=\"check-table\">\r\n                        {this.state.checks.map((checkEntry, i) =>\r\n                            <CheckRowComponent key={checkEntry.id}\r\n                                check={checkEntry}\r\n                                handleEdit={this.handleEdit.bind(this)}\r\n                                classes = {this.props.classes}\r\n                                handleDelete={this.handleDelete.bind(this)}\r\n                                ref={i==this.state.checks.length-1 ? this.finalCheckRef : undefined} />\r\n                            )}\r\n                        <CheckRowComponent  \r\n                            classes = {this.props.classes}\r\n                            handleEdit={this.handleNew.bind(this)}\r\n                            immutable={true}\r\n                            ref={this.newCheckRef}/>\r\n                        <div ref={this.scrollEndRef} />\r\n                    </div>\r\n                </div>\r\n                <div className={this.props.classes.summaryView}>\r\n                    <SummaryComponent \r\n                        classes={this.props.classes}\r\n                        summary={this.state?.summary}\r\n                        handleBaseDate={this.handleBaseDate.bind(this)}\r\n                        handleBaseDateClear={this.handleBaseDateClear.bind(this)}/> {/*change to getSafe perhaps*/}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default CheckTableComponent","// import theme from '../../_theme'\n\nexport const subscriptionsItems = [\n  { name: 'GitHub', ratio: 55.3, value: Math.round(55.3 * 144) },\n  { name: 'MaterialUI', ratio: 25.7, value: Math.round(25.7 * 144) },\n  { name: 'Google', ratio: 15.6, value: Math.round(15.6 * 144) },\n  { name: 'ModularCode', ratio: 8.4, value: Math.round(8.4 * 144) },\n  { name: 'GH', ratio: 5.5, value: Math.round(5.5 * 144) },\n]\n\nexport const subscriptionsHistoryChart = {\n  data: {\n    datasets: [\n      {\n        // backgroundColor: theme.palette.secondary.main,\n        // borderColor: theme.palette.secondary.main,\n        backgroundColor: 'rgba(97, 218, 251, 0.3)',\n        borderColor: '#61dafb',\n        borderWidth: 2,\n        label: 'Subscriptions',\n        fill: false,\n        data: [1545, 1350, 1270, 1830, 1955, 1865, 2034, 2544, 1956, 2211, 1540, 1670],\n        yAxisID: 'y1',\n      },\n      {\n        // backgroundColor: 'rgba(136, 151, 170, 0.1)',\n        backgroundColor: 'rgba(97, 218, 251, 0.3)',\n        borderColor: '#8897aa',\n        // borderDash: [5, 5],\n        borderWidth: 1,\n        data: [\n          23686,\n          30820,\n          59622,\n          146465,\n          78160,\n          79520,\n          36148,\n          48781,\n          158303,\n          155174,\n          104830,\n          86895,\n        ],\n        label: 'Visits',\n        yAxisID: 'y2',\n      },\n      {\n        // backgroundColor: 'rgba(136, 151, 170, 0.1)',\n        // backgroundColor: 'rgba(97, 218, 251, 0.3)',\n        backgroundColor: 'maroon',\n        // borderColor: '#8897aa',\n        borderColor: 'red',\n        borderDash: [5, 5],\n        borderWidth: 1,\n        data: [\n          1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,11000,12000,\n        ],\n        fill: false,\n        label: 'Trend',\n        yAxisID: 'y3',\n      },\n    ],\n    labels: [\n      '2019-03',\n      '2019-04',\n      '2019-05',\n      '2019-06',\n      '2019-07',\n      '2019-08',\n      '2019-09',\n      '2019-10',\n      '2019-11',\n      '2019-12',\n      '2020-01',\n      '2020-02',\n    ],\n  },\n  options: {\n    scales: {\n      xAxes: [\n        {\n          gridLines: { display: false },\n          ticks: { fontColor: '#aaa', autoSkipPadding: 50 },\n        },\n      ],\n      yAxes: [\n        {\n          id: 'y1',\n          gridLines: { display: false },\n          ticks: { fontColor: '#aaa', maxTicksLimit: 5 },\n        },\n        {\n          position: 'right',\n          id: 'y2',\n          gridLines: { display: false },\n          ticks: { fontColor: '#aaa', maxTicksLimit: 5 },\n        },\n        {\n          display: false,\n          position: 'right',\n          id: 'y3',\n          gridLines: { display: false },\n          ticks: { fontColor: '#aaa', maxTicksLimit: 5 },\n        },\n      ],\n    },\n    tooltips: {\n      mode: 'index',\n      intersect: false,\n    },\n    hover: {\n      mode: 'index',\n      intersect: false,\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n  },\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  makeStyles,\n  Grid,\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  IconButton,\n  LinearProgress,\n} from '@material-ui/core'\nimport { Timeline as IconTimeline, MoreVert as IconMoreVert } from '@material-ui/icons'\nimport { Line } from 'react-chartjs-2'\n\nimport { subscriptionsItems, subscriptionsHistoryChart } from './data'\n\nconst Subscriptions = props => {\n  const classes = useStyles()\n\n  return (\n    <Card>\n      <CardHeader\n        className={classes.cardHeader}\n        avatar={<IconTimeline className={classes.headerIcon} />}\n        // action={\n        //   <IconButton aria-label=\"settings\" size=\"small\">\n        //     <IconMoreVert />\n        //   </IconButton>\n        // }\n        title=\"Subscriptions\"\n      />\n      <CardContent className={classes.cardContent}>\n        <Grid container spacing={4}justify=\"center\">\n          <Grid item xs={10} className={classes.chartBox}>\n            <div className={classes.chartContainer}>\n              <div className={classes.chart}>\n                <Line\n                  data={subscriptionsHistoryChart.data}\n                  options={subscriptionsHistoryChart.options}\n                />\n              </div>\n            </div>\n          </Grid>\n          {/* <Grid item xs={12} sm={4} md={3} className={classes.ratingBox}>\n            {subscriptionsItems.map(({ name, ratio, value }) => (\n              <div key={name}>\n                <Grid container>\n                  <Grid item xs>\n                    <Typography variant=\"body1\">{name}</Typography>\n                  </Grid>\n                  <Grid item xs className={classes.ratingItemValueBox}>\n                    <Typography\n                      align=\"right\"\n                      variant=\"body2\"\n                      display=\"inline\"\n                      className={classes.ratingItemValue}\n                    >\n                      {value}\n                    </Typography>\n                    <Typography\n                      align=\"left\"\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      className={classes.ratingItemRatio}\n                    >\n                      {ratio}%\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <LinearProgress variant=\"determinate\" value={ratio} color=\"primary\" />\n              </div>\n            ))}\n          </Grid> */}\n        </Grid>\n      </CardContent>\n    </Card>\n  )\n}\n\nSubscriptions.propTypes = {}\n\nconst useStyles = makeStyles(theme => ({\n  cardHeader: {\n    borderBottom: '1px solid',\n    borderBottomColor: theme.palette.divider,\n  },\n  cardBody: {\n    overflow: 'hidden',\n  },\n  headerTitleBox: {},\n  headerActionsBox: {\n    textAlign: 'right',\n  },\n  headerIcon: {\n    color: theme.palette.primary.main,\n    verticalAlign: 'sub',\n    marginRight: '.3em',\n  },\n  chartBox: {\n    // borderRight: '1px solid',\n    borderRightColor: theme.palette.divider,\n  },\n  chartContainer: {\n    width: '100%',\n    position: 'relative',\n    paddingBottom: '25%',\n    minHeight: 240,\n  },\n  chart: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    top: 0,\n    left: 0,\n  },\n  cardContent: {\n    '&:last-child': {\n      paddingBottom: 'default',\n    },\n  },\n  ratingBox: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n  },\n  ratingItemValueBox: {\n    textAlign: 'right',\n    fontSize: '0.7em',\n  },\n  ratingItemValue: {\n    display: 'inline-block',\n  },\n  ratingItemRatio: {\n    marginLeft: 4,\n    display: 'inline-block',\n    width: '3em',\n    // fontSize: '1em',\n  },\n}))\n\nexport default Subscriptions\n","import React from 'react';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SubscriptionsHistory from '../../SubscriptionsHistory/SubscriptionsHistory';\r\n\r\nclass ReportComponent extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                <SubscriptionsHistory />\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReportComponent","import React from 'react';\r\n\r\nimport CheckTableComponent from \"./CheckTable/CheckTableComponent\";\r\n\r\nimport { Drawer, List, ListItem, ListItemText, Popper, AppBar, Toolbar, Button, ListItemIcon, Paper, ButtonGroup, Collapse } from \"@material-ui/core\";\r\nimport AccountBalanceWalletOutlinedIcon from '@material-ui/icons/AccountBalanceWalletOutlined';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\n\r\n// import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\nimport ReportComponent from './Report/ReportComponent';\r\n\r\nrequire('react-datepicker/dist/react-datepicker.css')\r\n\r\nclass Root extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            accounts: [],\r\n            drawerOpen: true,\r\n            currAccount: 0,\r\n            popperOpen: false,\r\n            name: \"\",\r\n            deletePopperOpen: false\r\n        }\r\n\r\n        this.refreshAccounts.bind(this);\r\n        this.handleNewAccount.bind(this);\r\n        this.toggleDrawer.bind(this);\r\n        this.setCurrAccount.bind(this);\r\n        this.handleCreateAccount.bind(this);\r\n        this.handleDeleteAccount.bind(this);\r\n        this.deleteAccount.bind(this);\r\n        this.setDefaultAccount.bind(this);\r\n\r\n        this.newButtonRef = React.createRef();\r\n        this.deleteButtonRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshAccounts();\r\n    }\r\n\r\n    setDefaultAccount(){\r\n        this.setState({\r\n            currAccount: 0\r\n        });\r\n    }\r\n\r\n    refreshAccounts() {\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('GET', '/account', true);\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState == 4) {\r\n                console.log(xhr.response)\r\n                let result = (JSON.parse(xhr.response));\r\n                this.setState({\r\n                    accounts: result\r\n                });\r\n            }\r\n        }.bind(this);\r\n        xhr.setRequestHeader('Content-Type', 'application/json');\r\n        xhr.send();\r\n    }\r\n\r\n    handleCreateAccount() {\r\n        let newAccount = {\r\n            id: null,\r\n            accountName: this.state.name\r\n        }\r\n        console.log(newAccount)\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('POST', '/newAccount', true);\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState == 4) {\r\n                this.setState(({\r\n                    popperOpen: false,\r\n                    name: \"\"\r\n                }));\r\n                this.refreshAccounts();\r\n            }\r\n        }.bind(this);\r\n        xhr.setRequestHeader('Content-Type', 'application/json');\r\n        xhr.send(JSON.stringify(newAccount));\r\n    }\r\n\r\n    deleteAccount(targetAccount) {\r\n        if(!window.confirm(\"Delete '\".concat(targetAccount.accountName).concat(\"'? This operation cannot be undone\"))){\r\n            return;\r\n        }\r\n        this.setState(({\r\n            deletePopperOpen: false,\r\n        }));\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('DELETE', '/deleteAccount/'.concat(targetAccount.id), true);\r\n        xhr.onreadystatechange = function () {\r\n            if (xhr.readyState == 4) {\r\n                this.setState(({\r\n                    popperOpen: false,\r\n                    name: \"\"\r\n                }));\r\n                this.refreshAccounts();\r\n            }\r\n        }.bind(this);\r\n        xhr.setRequestHeader('Content-Type', 'application/json');\r\n        xhr.send(targetAccount.id);\r\n    }\r\n\r\n    handleNewAccount() {\r\n        this.setState((prevState) => ({\r\n            popperOpen: !prevState.popperOpen,\r\n            name: !prevState.popperOpen ? prevState.name : \"\"\r\n        }));\r\n    }\r\n\r\n    handleDeleteAccount() {\r\n        this.setState((prevState) => ({\r\n            deletePopperOpen: !prevState.deletePopperOpen,\r\n        }))\r\n    }\r\n\r\n    toggleDrawer() {\r\n        this.setState((prevState) => ({\r\n            drawerOpen: !prevState.drawerOpen\r\n        }));\r\n    }\r\n\r\n    setCurrAccount(i) {\r\n        this.setState({\r\n            currAccount: i\r\n        });\r\n    }\r\n\r\n    handleCreateInputChange(event) {\r\n        this.setState({\r\n            name: event.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let classes = this.props.classes;\r\n        let accounts = this.state.accounts;\r\n        let currAccount = this.state.currAccount;\r\n        let drawerOpen = this.state.drawerOpen;\r\n        let popperOpen = (this.state.popperOpen);\r\n        let name = this.state.name;\r\n        let deletePopperOpen = this.state.deletePopperOpen;\r\n\r\n        return (\r\n                <div className={classes.root}>\r\n                    <AppBar position=\"fixed\" className={classes.appBar}>\r\n                        <Toolbar disableGutters className={classes.toolBar}>\r\n                            <Button className={classes.toolBarButton} onClick={this.toggleDrawer.bind(this)}>Menu</Button>\r\n                            {/* <Button className={classes.toolBarButton} component={Link} to=\"/\">Main</Button> */}\r\n                            {/* <Button className={classes.toolBarButton} component={Link} to=\"/report\">Report</Button> */}\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <Drawer\r\n                        className={drawerOpen ? classes.drawer : classes.drawerClosed}\r\n                        variant=\"persistent\"\r\n                        classes={{\r\n                            paper: classes.drawerPaper\r\n                        }}\r\n                        open={drawerOpen}\r\n                        transitionDuration={0}>\r\n                        <List className={classes.subToolBar}>\r\n                            {accounts.map((account, i) => (\r\n                                <ListItem button value={i} className={classes.listButton} onClick={() => this.setCurrAccount(i)}>\r\n                                    <ListItemIcon>\r\n                                        <AccountBalanceWalletOutlinedIcon className={classes.accountIcon} />\r\n                                    </ListItemIcon>\r\n                                    <ListItemText primary={account.accountName}></ListItemText>\r\n                                </ListItem>\r\n                            ))}\r\n                            <ListItem button className={classes.listButton} ref={this.newButtonRef} onClick={this.handleNewAccount.bind(this)}>\r\n                                <ListItemIcon>\r\n                                    <AddCircleOutlineIcon className={classes.accountIcon} />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"New Account\"></ListItemText>\r\n                                {popperOpen ? <ExpandLess /> : <ExpandMore />}\r\n                            </ListItem>\r\n                            <Collapse in={popperOpen} timeout=\"auto\" unmountOnExit>\r\n                                <List component=\"div\" disablePadding>\r\n                                    <ListItem className={classes.nestedListItem}>\r\n                                        <input value={name} className={classes.accountInput} placeholder=\"Name\" onChange={this.handleCreateInputChange.bind(this)}></input>\r\n                                        <Button className={classes.filterButton} onClick={this.handleCreateAccount.bind(this)}>Create</Button>\r\n                                    </ListItem>\r\n                                </List>\r\n                            </Collapse>\r\n                            <ListItem button className={classes.listButton} ref={this.deleteButtonRef} onClick={this.handleDeleteAccount.bind(this)}>\r\n                                <ListItemIcon>\r\n                                    <DeleteOutlineIcon className={classes.accountIcon} />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"Delete Account\"></ListItemText>\r\n                                {deletePopperOpen ? <ExpandLess /> : <ExpandMore />}\r\n                            </ListItem>\r\n                            <Collapse in={deletePopperOpen} timeout=\"auto\" unmountOnExit>\r\n                                <List component=\"div\" disablePadding>\r\n                                    {accounts.map((account) => (\r\n                                        <ListItem button className={classes.nestedListButton} onClick={() => this.deleteAccount(account)}>\r\n                                            <ListItemIcon>\r\n                                                <RemoveCircleOutlineIcon className={classes.accountIcon} />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary={account.accountName}></ListItemText>\r\n                                        </ListItem>\r\n                                    ))}\r\n                                </List>\r\n                            </Collapse>\r\n                        </List>\r\n                    </Drawer>\r\n                    <div className={classes.content}>\r\n                                <CheckTableComponent\r\n                                    classes={classes}\r\n                                    setDefaultAccount={this.setDefaultAccount.bind(this)}\r\n                                    account={accounts[currAccount] != null ? accounts[currAccount] : null} />\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Root","import React from 'react';\r\n\r\nimport CheckTableComponent from \"./CheckTable/CheckTableComponent\";\r\n\r\nimport { Drawer, List, ListItem, ListItemText, makeStyles, AppBar, Toolbar, Button, ListItemIcon } from \"@material-ui/core\";\r\nimport AccountBalanceWalletOutlinedIcon from '@material-ui/icons/AccountBalanceWalletOutlined';\r\n\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\nimport ReportComponent from './Report/ReportComponent';\r\nimport Root from './Root';\r\n\r\nrequire('react-datepicker/dist/react-datepicker.css')\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst styles = makeStyles({\r\n    root: {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0\r\n    },\r\n\r\n    drawerClosed: {\r\n        width: 0,\r\n        flexShrink: 0\r\n    },\r\n\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        backgroundColor: '#20232a'\r\n    },\r\n\r\n    main: {\r\n        flex: 1,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n\r\n    filterView:{\r\n        flex: 10,\r\n        display: \"flex\"\r\n    },\r\n\r\n    tableView: {\r\n        flex: 70,\r\n        display: \"flex\",\r\n        flexDirection: 'row',\r\n        overflowY: \"auto\",\r\n        backgroundColor: \"#282c34\",\r\n    },\r\n\r\n    summaryView: {\r\n        flex: 20,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n\r\n    split: {\r\n        flex: 1\r\n    },\r\n\r\n    appBar: {\r\n        zIndex: 1400\r\n    },\r\n\r\n    accountPopper: {\r\n        zIndex: 1401\r\n    },\r\n\r\n    accountPaper: {\r\n        backgroundColor: 'rgb(50,54,62)',\r\n    },\r\n\r\n    accountInput: {\r\n        paddingLeft: 50\r\n    },\r\n\r\n    toolBar: {\r\n        minHeight: 25,\r\n        backgroundColor: '#20232a'\r\n    },\r\n\r\n    toolBarButton: {\r\n        textTransform: 'none',\r\n        borderRadius: 0,\r\n        maxHeight: 25,\r\n        minHeight: 25,\r\n        maxWidth: 75,\r\n        minWidth: 75,\r\n        fontSize: 15,\r\n        color: 'rgba(255,255,255, 0.7)',\r\n        padding: 0,\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(97, 218, 251, 0.8)',\r\n            padding: 0\r\n        }\r\n    },\r\n\r\n    subToolBar: {\r\n        paddingTop: 25\r\n    },\r\n\r\n    listButton: {\r\n        paddingTop: 20,\r\n        paddingBottom: 20,\r\n        color: 'rgba(255,255,255, 0.7)',\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(97, 218, 251, 0.8)',\r\n        }\r\n    },\r\n\r\n    nestedListButton: {\r\n        color: 'rgba(255,255,255, 0.7)',\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(255, 0, 0, 0.8)',\r\n        },\r\n        paddingLeft: 20\r\n    },\r\n\r\n    nestedListItem: {\r\n        color: 'rgba(255,255,255, 0.7)',\r\n        paddingLeft: 20\r\n    },\r\n\r\n    accountIcon: {\r\n        fill: 'rgba(255,255,255, 0.7)',\r\n    },\r\n\r\n    content: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        paddingTop: 25, //this is so that is below the toolbar\r\n        // transition: 'all 500ms cubic-bezier(0.23, 1, 0.32, 1)'\r\n    },\r\n\r\n    filterRoot: {\r\n        flexGrow: 1,\r\n        backgroundColor: \"#20232a\"\r\n      },\r\n\r\n    filterPaper: {\r\n        // padding: 10,\r\n        marginLeft: 10,\r\n        marginRight: 10,\r\n        marginBottom: 2,\r\n        marginTop: 2,\r\n        textAlign: 'center',\r\n        backgroundColor: \"#20232a\",\r\n        display: \"flex\"\r\n      },\r\n\r\n    filterInput: {\r\n        border: 'none !important',\r\n        borderColor: 'transparent !important',\r\n        backgroundColor: 'transparent !important',\r\n        padding: '0 !important',\r\n        margin: '0 !important',\r\n        /* flex-grow: 1; */\r\n        flex: 1,\r\n        height: 27,\r\n        color: 'white',\r\n        // boxShadow: 'inset 0px -2px #ebebeb',\r\n        transition: 'box-shadow 0.3s',\r\n        '&:focus': {\r\n            outline: 'none',\r\n            boxShadow: 'inset 0px -2px rgb(97, 218, 251)',\r\n        }\r\n    },\r\n\r\n    filterButton: {\r\n        flex: 1,\r\n        color: 'rgba(255,255,255, 0.7)',\r\n        '&:hover': {\r\n            backgroundColor: 'rgba(97, 218, 251, 0.8)',\r\n        }\r\n    },\r\n\r\n    filterSelect: {\r\n        \r\n    },\r\n\r\n    filterMenu: {\r\n        backgroundColor: \"#20232a\",\r\n        color: 'rgba(255,255,255, 0.7)',\r\n        // display: \"flex\"\r\n    },\r\n\r\n    datePicker: {\r\n        \r\n    },\r\n\r\n    summaryDatePicker: {\r\n        backgroundColor: 'transparent',\r\n        color: 'white',\r\n        border: 'none',\r\n        display: 'flex',\r\n        flex: 1,\r\n        ':&:focus':{\r\n            outline: 'none',\r\n        }\r\n    },\r\n\r\n    summaryPaper: {\r\n        // padding: 10,\r\n        marginLeft: 10,\r\n        marginRight: 10,\r\n        marginBottom: 30,\r\n        marginTop: 2,\r\n        paddingRight: 30,\r\n        paddingLeft: 30,\r\n        backgroundColor: \"#20232a\",\r\n        display: \"inline-block\",\r\n        color: 'rgba(255,255,255, 0.7)'\r\n    },\r\n\r\n    futureSummaryPaper: {\r\n        marginLeft: 30,\r\n        marginRight: 10,\r\n        marginBottom: 2,\r\n        marginTop: 2,\r\n        paddingRight: 30,\r\n        paddingLeft: 30,\r\n        backgroundColor: \"#20232a\",\r\n        display: \"inline-block\",\r\n        color: 'rgba(255,255,255, 0.7)'\r\n    },\r\n\r\n    deleteButton: {\r\n        backgroundColor: '#282c34',\r\n        border: 'none',\r\n        transition: '0.3s',\r\n        ':&:hover': {\r\n            backgroundColor: 'red',\r\n            padding: '8px',\r\n            transition: '0.3s'\r\n        },\r\n        ':&:focus': {\r\n            outline: 'none'\r\n        }\r\n    }\r\n});\r\n\r\nconst Main = () => {\r\n    const classes = styles();\r\n    return (\r\n        <Root\r\n            classes={classes}/>\r\n    );\r\n}\r\n\r\nexport default Main","import React from 'react';\nimport {makeStyles} from '@material-ui/core';\nimport './App.css';\n\nimport Main from './main/Main';\n\nfunction App() {\n\n  return (\n    <Main/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}